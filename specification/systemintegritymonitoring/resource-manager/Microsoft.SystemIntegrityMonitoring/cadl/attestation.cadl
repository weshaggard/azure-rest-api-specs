import "@cadl-lang/rest";
import "@azure-tools/cadl-providerhub";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-azure-resource-manager";
import "./provisioningstate.cadl";
import "./resourceconnection.cadl";

@doc("Payload for applying measurement profile versions to specified supported azure resources.")
model ApplyForResourceConnectionsPayload {
  @doc("Measurement profile versions to be applied.")
  versions: string[];

  @doc("Supported azure resources to apply measurement profile versions to.")
  resourceToApply: ResourceConnectionProperties[];
}

@doc("Payload for removing measurement profile versions applied to specified supported azure resources.")
model RemoveForResourceConnectionsPayload {
  @doc("Measurement profile versions to be removed.")
  versions: string[];

  @doc("Supported azure resources to remove measurement profile versions from.")
  resourceToRemove: ResourceConnectionProperties[];
}

@doc("Payload for uploading new measurements from a cleanroom device to a device profile.")
model NewMeasurementProfilePayload {
  @doc("Challenge received from the Initiate request.")
  challenge: ServiceChallenge;

  @doc("Service context received from the Initiate request.")
  serviceContext: ServiceContext;

  @doc("Name of the device.")
  deviceName: string;

  @doc("List of attestations.")
  attestations: AttestationProperties[];
}

@doc("Attestation properties.")
model AttestationProperties {
  @doc("Type of attestation to perform.")
  attestationType: AttestationType;

  @doc("JWT token received from MAA.")
  attestationData: string;
}

@doc("Response received from Initiate.")
model InitiateRequestResponse {
  @doc("Challenge received from the Initiate request.")
  challenge: ServiceChallenge;

  @doc("Service context received from the Initiate request.")
  serviceContext: ServiceContext;

  @doc("List of attestations the service requires from the device.")
  requiredAttestations: AttestationType[];

  @doc("Endpoint for devices to call MAA APIs.")
  maaUrl: Url;
}

@doc("Currently supported attestation types.")
@knownValues(AttestationTypeValues)
model AttestationType is string {}
enum AttestationTypeValues {
  Boot
}

model ServiceChallenge is string;

model ServiceContext is string;

model DeviceId is string;

model Url is string;