{
  "swagger": "2.0",
  "info": {
    "version": "2022-10-15-preview",
    "title": "Workloads Client",
    "description": "Workloads client provides access to various workload operations"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/epicVirtualInstances/{epicVirtualInstanceName}": {
      "put": {
        "tags": [
          "EpicVirtualInstances"
        ],
        "operationId": "EpicVirtualInstances_Create",
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Create Epic system as Virtual Instance Test": {
            "$ref": "./examples/EpicVirtualInstance/EpicVirtualInstances_Create.json"
          }
        },
        "description": "Creates a Virtual Instance for Epic.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/EpicVirtualInstanceNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "description": "The Virtual Instance for Epic request body.",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/EpicVirtualInstance"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Describes the created Virtual Instance for Epic.",
            "schema": {
              "$ref": "#/definitions/EpicVirtualInstance"
            }
          },
          "200": {
            "description": "Describes the successfully created Virtual Instance for Epic.",
            "schema": {
              "$ref": "#/definitions/EpicVirtualInstance"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "EpicVirtualInstances"
        ],
        "operationId": "EpicVirtualInstances_Get",
        "x-ms-examples": {
          "EpicVirtualInstances_Get": {
            "$ref": "./examples/EpicVirtualInstance/EpicVirtualInstances_Get.json"
          }
        },
        "description": "Gets a Virtual Instance for Epic.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/EpicVirtualInstanceNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Describes the Virtual Instance for Epic.",
            "schema": {
              "$ref": "#/definitions/EpicVirtualInstance"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "EpicVirtualInstances"
        ],
        "operationId": "EpicVirtualInstances_Update",
        "x-ms-examples": {
          "EpicVirtualInstances_Update": {
            "$ref": "./examples/EpicVirtualInstance/EpicVirtualInstances_Update.json"
          }
        },
        "description": "Updates a Virtual Instance for Epic.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/EpicVirtualInstanceNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The Update Virtual Instance for Epic request body.",
            "schema": {
              "$ref": "#/definitions/UpdateEpicVirtualInstanceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Describes the successfully updated Virtual Instance for Epic.",
            "schema": {
              "$ref": "#/definitions/EpicVirtualInstance"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EpicVirtualInstances"
        ],
        "operationId": "EpicVirtualInstances_Delete",
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "EpicVirtualInstances_Delete": {
            "$ref": "./examples/EpicVirtualInstance/EpicVirtualInstances_Delete.json"
          }
        },
        "description": "Deletes a Virtual Instance for Epic.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/EpicVirtualInstanceNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationStatusResult"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/epicVirtualInstances": {
      "get": {
        "tags": [
          "EpicVirtualInstances"
        ],
        "operationId": "EpicVirtualInstances_ListByResourceGroup",
        "x-ms-examples": {
          "EpicVirtualInstances_ListByResourceGroup": {
            "$ref": "./examples/EpicVirtualInstance/EpicVirtualInstances_ListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "description": "Gets all Virtual Instances for Epic in a resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of all Virtual Instances for Epic.",
            "schema": {
              "$ref": "#/definitions/EpicVirtualInstanceList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/epicVirtualInstances": {
      "get": {
        "tags": [
          "EpicVirtualInstances"
        ],
        "operationId": "EpicVirtualInstances_ListBySubscription",
        "x-ms-examples": {
          "EpicVirtualInstances_ListBySubscription": {
            "$ref": "./examples/EpicVirtualInstance/EpicVirtualInstances_ListBySubscription.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "description": "Gets all Virtual Instances for Epic in the subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of all Virtual Instances for Epic in the subscription.",
            "schema": {
              "$ref": "#/definitions/EpicVirtualInstanceList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/epicVirtualInstances/{epicVirtualInstanceName}/presentationInstances/{presentationInstanceName}": {
      "get": {
        "tags": [
          "EpicPresentationInstances"
        ],
        "operationId": "EpicPresentationInstances_Get",
        "x-ms-examples": {
          "EpicPresentationInstances_Get": {
            "$ref": "./examples/EpicVirtualInstance/EpicPresentationInstances_Get.json"
          }
        },
        "description": "Gets the Epic Presentation Instance.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/EpicVirtualInstanceNameParameter"
          },
          {
            "$ref": "#/parameters/PresentationInstanceNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Describes the Epic Presentation Server Instance.",
            "schema": {
              "$ref": "#/definitions/EpicPresentationServerInstance"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "EpicPresentationInstances"
        ],
        "operationId": "EpicPresentationInstances_Create",
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "EpicPresentationInstances_Create": {
            "$ref": "./examples/EpicVirtualInstance/EpicPresentationInstances_Create.json"
          }
        },
        "description": "Puts the Epic Presentation Instance. <br><br>This will be used by service only. PUT by end user will return a Bad Request error.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/EpicVirtualInstanceNameParameter"
          },
          {
            "$ref": "#/parameters/PresentationInstanceNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The Epic Presentation Server instance request body.",
            "schema": {
              "$ref": "#/definitions/EpicPresentationServerInstance"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Describes the created Epic Presentation Server Instance.",
            "schema": {
              "$ref": "#/definitions/EpicPresentationServerInstance"
            }
          },
          "200": {
            "description": "Describes the Epic Presentation Server Instance.",
            "schema": {
              "$ref": "#/definitions/EpicPresentationServerInstance"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "EpicPresentationInstances"
        ],
        "operationId": "EpicPresentationInstances_Update",
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "EpicPresentationInstances_Update": {
            "$ref": "./examples/EpicVirtualInstance/EpicPresentationInstances_Update.json"
          }
        },
        "description": "Updates the Epic Presentation Instance. <br>This can be used to update tags.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/EpicVirtualInstanceNameParameter"
          },
          {
            "$ref": "#/parameters/PresentationInstanceNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The Epic Presentation Server instance request body.",
            "schema": {
              "$ref": "#/definitions/UpdateEpicPresentationInstanceRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Describes the created Epic Presentation Server Instance.",
            "schema": {
              "$ref": "#/definitions/EpicPresentationServerInstance"
            }
          },
          "200": {
            "description": "Describes the Epic Presentation Server Instance.",
            "schema": {
              "$ref": "#/definitions/EpicPresentationServerInstance"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EpicPresentationInstances"
        ],
        "operationId": "EpicPresentationInstances_Delete",
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "EpicPresentationInstances_Delete": {
            "$ref": "./examples/EpicVirtualInstance/EpicPresentationInstances_Delete.json"
          }
        },
        "description": "Deletes the Epic Presentation Instance. <br> This will be used by service only. Delete by end user will return a Bad Request error.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/EpicVirtualInstanceNameParameter"
          },
          {
            "$ref": "#/parameters/PresentationInstanceNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationStatusResult"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/epicVirtualInstances/{epicVirtualInstanceName}/presentationInstances": {
      "get": {
        "tags": [
          "EpicPresentationInstances"
        ],
        "operationId": "EpicPresentationInstances_List",
        "x-ms-examples": {
          "EpicPresentationInstances_List": {
            "$ref": "./examples/EpicVirtualInstance/EpicPresentationInstances_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "description": "Lists the Epic Presentation Instances in an EVI.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/EpicVirtualInstanceNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Describes the Epic Presentation Server Instance.",
            "schema": {
              "$ref": "#/definitions/EpicPresentationInstanceList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/epicVirtualInstances/{epicVirtualInstanceName}/start": {
      "post": {
        "tags": [
          "EpicVirtualInstances"
        ],
        "operationId": "EpicVirtualInstances_Start",
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "EpicVirtualInstances_Start": {
            "$ref": "./examples/EpicVirtualInstance/EpicVirtualInstances_Start.json"
          }
        },
        "description": "Starts the Epic System.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/EpicVirtualInstanceNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationStatusResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/epicVirtualInstances/{epicVirtualInstanceName}/stop": {
      "post": {
        "tags": [
          "EpicVirtualInstances"
        ],
        "operationId": "EpicVirtualInstances_Stop",
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "EpicVirtualInstances_Stop": {
            "$ref": "./examples/EpicVirtualInstance/EpicVirtualInstances_Stop.json"
          }
        },
        "description": "Stops the Epic System.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/EpicVirtualInstanceNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The Virtual Instances for Epic stop request body.",
            "schema": {
              "$ref": "#/definitions/StopRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationStatusResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "HealthState": {
      "description": "Defines the Epic Instance health.",
      "enum": [
        "Unknown",
        "Healthy",
        "Unhealthy",
        "Degraded"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "EpicHealthState",
        "modelAsString": true
      }
    },
    "EpicVirtualInstanceStatus": {
      "description": "Defines the Epic Instance status.",
      "enum": [
        "Starting",
        "Running",
        "Stopping",
        "Offline",
        "PartiallyRunning",
        "Unavailable"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "EpicVirtualInstanceStatus",
        "modelAsString": true
      }
    },
    "EpicVirtualInstanceState": {
      "description": "Defines the Virtual Instance for Epic state.",
      "enum": [
        "InfrastructureDeploymentPending",
        "InfrastructureDeploymentInProgress",
        "InfrastructureDeploymentFailed",
        "SoftwareInstallationPending",
        "SoftwareInstallationInProgress",
        "SoftwareInstallationFailed",
        "DiscoveryPending",
        "DiscoveryInProgress",
        "DiscoveryFailed",
        "RegistrationComplete"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "EpicVirtualInstanceState",
        "modelAsString": true
      }
    },
    "EnvironmentType": {
      "description": "Defines the environment type - Production/Non Production.",
      "enum": [
        "NonProd",
        "Prod"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "EpicEnvironmentType",
        "modelAsString": true
      },
      "x-ms-mutability": [
        "create",
        "read"
      ]
    },
    "StopRequest": {
      "description": "Stop Epic Request.",
      "type": "object",
      "properties": {
        "hardStop": {
          "type": "boolean",
          "default": false,
          "description": "A boolean to specify if the Epic system should be hard-stopped."
        }
      }
    },
    "CentralServerVirtualMachineType": {
      "description": "Defines the type of central server VM.",
      "enum": [
        "Primary",
        "Secondary",
        "Unknown",
        "ASCS",
        "ERSInactive",
        "ERS",
        "Standby"
      ],
      "type": "string",
      "readOnly": true,
      "x-ms-enum": {
        "name": "CentralServerVirtualMachineType",
        "modelAsString": true
      },
      "x-ms-mutability": [
        "read"
      ]
    },
    "EnqueueReplicationServerType": {
      "description": "Defines the type of Enqueue Replication Server.",
      "enum": [
        "EnqueueReplicator1",
        "EnqueueReplicator2"
      ],
      "type": "string",
      "readOnly": true,
      "x-ms-enum": {
        "name": "EnqueueReplicationServerType",
        "modelAsString": true
      },
      "x-ms-mutability": [
        "read"
      ]
    },
    "ProvisioningState": {
      "description": "Defines the provisioning states.",
      "enum": [
        "Succeeded",
        "Updating",
        "Creating",
        "Failed",
        "Deleting"
      ],
      "type": "string",
      "readOnly": true,
      "x-ms-enum": {
        "name": "EpicVirtualInstanceProvisioningState",
        "modelAsString": true
      }
    },
    "EpicVirtualInstanceError": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "object",
          "description": "The Virtual Instance for Epic error body.",
          "$ref": "#/definitions/ErrorDefinition"
        }
      },
      "description": "An error response from the Virtual Instance for Epic Workload service."
    },
    "UpdateEpicVirtualInstanceRequest": {
      "description": "Defines the request body for updating Virtual Instance for Epic.",
      "type": "object",
      "properties": {
        "tags": {
          "description": "Gets or sets the Resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "identity": {
          "$ref": "../../common-types/v1/commonTypes.json#/definitions/UserAssignedServiceIdentity"
        }
      }
    },
    "UpdateEpicPresentationInstanceRequest": {
      "description": "Defines the request body for updating Epic Presentation Instance.",
      "type": "object",
      "properties": {
        "tags": {
          "description": "Gets or sets the Resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ImageReference": {
      "type": "object",
      "properties": {
        "publisher": {
          "type": "string",
          "description": "The image publisher."
        },
        "offer": {
          "type": "string",
          "description": "Specifies the offer of the platform image or marketplace image used to create the virtual machine."
        },
        "sku": {
          "type": "string",
          "description": "The image SKU."
        },
        "version": {
          "type": "string",
          "description": "Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available."
        },
        "exactVersion": {
          "type": "string",
          "readOnly": true,
          "description": "Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs from 'version', only if the value specified in 'version' field is 'latest'."
        },
        "sharedGalleryImageId": {
          "type": "string",
          "description": "Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call."
        }
      },
      "description": "Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set."
    },
    "WindowsConfiguration": {
      "type": "object",
      "x-ms-discriminator-value": "Windows",
      "allOf": [
        {
          "$ref": "#/definitions/OSConfiguration"
        }
      ],
      "properties": {},
      "description": "Specifies Windows operating system settings on the virtual machine."
    },
    "SshPublicKey": {
      "type": "object",
      "properties": {
        "keyData": {
          "type": "string",
          "description": "SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed)."
        }
      },
      "description": "Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed."
    },
    "SshConfiguration": {
      "type": "object",
      "properties": {
        "publicKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SshPublicKey"
          },
          "description": "The list of SSH public keys used to authenticate with linux based VMs.",
          "x-ms-identifiers": []
        }
      },
      "description": "SSH configuration for Linux based VMs running on Azure"
    },
    "LinuxConfiguration": {
      "type": "object",
      "x-ms-discriminator-value": "Linux",
      "allOf": [
        {
          "$ref": "#/definitions/OSConfiguration"
        }
      ],
      "properties": {
        "disablePasswordAuthentication": {
          "type": "boolean",
          "description": "Specifies whether password authentication should be disabled."
        },
        "ssh": {
          "$ref": "#/definitions/SshConfiguration",
          "description": "Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use 'sshKeyPair' instead)"
        },
        "sshKeyPair": {
          "$ref": "#/definitions/SshKeyPair",
          "description": "The SSH Key-pair used to authenticate with the VM's."
        }
      },
      "description": "Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros)."
    },
    "OSConfiguration": {
      "description": "Defines the OS configuration.",
      "type": "object",
      "required": [
        "osType"
      ],
      "properties": {
        "osType": {
          "description": "The OS Type",
          "enum": [
            "Linux",
            "Windows"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "OSType",
            "modelAsString": true
          },
          "x-ms-mutability": [
            "create",
            "read"
          ]
        }
      },
      "discriminator": "osType"
    },
    "OSProfile": {
      "type": "object",
      "properties": {
        "adminUsername": {
          "type": "string",
          "description": "Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in \".\" <br><br> **Disallowed values:** \"administrator\", \"admin\", \"user\", \"user1\", \"test\", \"user2\", \"test1\", \"user3\", \"admin1\", \"1\", \"123\", \"a\", \"actuser\", \"adm\", \"admin2\", \"aspnet\", \"backup\", \"console\", \"david\", \"guest\", \"john\", \"owner\", \"root\", \"server\", \"sql\", \"support\", \"support_388945a0\", \"sys\", \"test2\", \"test3\", \"user4\", \"user5\". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters."
        },
        "adminPassword": {
          "type": "string",
          "x-ms-secret": true,
          "description": "Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\\W_]) <br><br> **Disallowed values:** \"abc@123\", \"P@$$w0rd\", \"P@ssw0rd\", \"P@ssword123\", \"Pa$$word\", \"pass@word1\", \"Password!\", \"Password1\", \"Password22\", \"iloveyou!\" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)"
        },
        "osConfiguration": {
          "$ref": "#/definitions/OSConfiguration",
          "description": "Specifies Windows operating system settings on the virtual machine."
        }
      },
      "description": "Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned."
    },
    "VirtualMachineConfiguration": {
      "description": "Defines the virtual machine configuration.",
      "type": "object",
      "properties": {
        "vmSize": {
          "type": "string",
          "description": "The virtual machine size."
        },
        "imageReference": {
          "description": "The image reference.",
          "$ref": "#/definitions/ImageReference"
        },
        "osProfile": {
          "description": "The OS profile.",
          "$ref": "#/definitions/OSProfile"
        }
      },
      "required": [
        "vmSize",
        "imageReference",
        "osProfile"
      ]
    },
    "PresentationServerConfiguration": {
      "description": "Gets or sets the presentation server configuration.",
      "type": "object",
      "properties": {
        "subnetId": {
          "description": "The subnet id.",
          "type": "string"
        },
        "virtualMachineConfiguration": {
          "description": "Gets or sets the virtual machine configuration.",
          "$ref": "#/definitions/VirtualMachineConfiguration"
        },
        "instanceCount": {
          "description": "The number of presentation server VMs.",
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "subnetId",
        "virtualMachineConfiguration",
        "instanceCount"
      ]
    },
    "SshKeyPair": {
      "description": "The SSH Key-pair used to authenticate with the VM. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).",
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string",
          "description": "SSH public key"
        },
        "privateKey": {
          "type": "string",
          "x-ms-secret": true,
          "description": "SSH private key."
        }
      }
    },
    "EpicVirtualInstanceProperties": {
      "description": "Defines the Virtual Instance for Epic properties.",
      "type": "object",
      "required": [
        "environment"
      ],
      "properties": {
        "environment": {
          "$ref": "#/definitions/EnvironmentType",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "epicProduct": {
          "$ref": "#/definitions/EpicProductType",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "status": {
          "$ref": "#/definitions/EpicVirtualInstanceStatus",
          "readOnly": true
        },
        "health": {
          "$ref": "#/definitions/HealthState",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/EpicVirtualInstanceState",
          "readOnly": true
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "readOnly": true
        },
        "errors": {
          "description": "Defines the Virtual Instance for Epic errors.",
          "$ref": "#/definitions/EpicVirtualInstanceError",
          "readOnly": true
        }
      }
    },
    "EpicVirtualInstance": {
      "description": "Define the Virtual Instance for Epic.",
      "type": "object",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ],
      "properties": {
        "identity": {
          "$ref": "../../common-types/v1/commonTypes.json#/definitions/UserAssignedServiceIdentity"
        },
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/EpicVirtualInstanceProperties"
        }
      },
      "required": [
        "properties"
      ]
    },
    "EpicVirtualInstanceList": {
      "description": "Defines the collection of Virtual Instance for Epic.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets the list of Virtual Instances for Epic.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EpicVirtualInstance"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "description": "Gets the value of next link.",
          "type": "string"
        }
      }
    },
    "EpicPresentationInstanceList": {
      "description": "Defines the collection of Epic Presentation Instances.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets the list of Epic presentation instances.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EpicPresentationServerInstance"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "description": "Gets the value of next link.",
          "type": "string"
        }
      }
    },
    "MessageServerProperties": {
      "description": "Defines the Epic message server properties.",
      "type": "object",
      "properties": {
        "msPort": {
          "type": "integer",
          "format": "int64",
          "description": "The message server port.",
          "readOnly": true,
          "x-nullable": true
        },
        "internalMsPort": {
          "type": "integer",
          "format": "int64",
          "description": "The message server internal MS port.",
          "readOnly": true,
          "x-nullable": true
        },
        "httpPort": {
          "type": "integer",
          "format": "int64",
          "description": "The message server http port.",
          "readOnly": true,
          "x-nullable": true
        },
        "httpsPort": {
          "type": "integer",
          "format": "int64",
          "description": "The message server https port.",
          "readOnly": true,
          "x-nullable": true
        },
        "hostname": {
          "type": "string",
          "description": "The message server Epic host name.",
          "readOnly": true
        },
        "ipAddress": {
          "type": "string",
          "description": "The message server IP Address.",
          "readOnly": true
        },
        "health": {
          "$ref": "#/definitions/HealthState",
          "readOnly": true
        }
      }
    },
    "EpicProductType": {
      "description": "Defines the Epic Product type.",
      "enum": [
        "ECC",
        "S4HANA",
        "Other",
        "NA"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "EpicProductType",
        "modelAsString": true
      },
      "x-ms-mutability": [
        "create",
        "read"
      ]
    },
    "EnqueueServerProperties": {
      "description": "Defines the Epic enqueue server properties.",
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string",
          "description": "The enqueue server Epic host name.",
          "readOnly": true
        },
        "ipAddress": {
          "type": "string",
          "description": "The enqueue server Epic IP Address.",
          "readOnly": true
        },
        "port": {
          "type": "integer",
          "format": "int64",
          "description": "The enqueue server Port.",
          "readOnly": true,
          "x-nullable": true
        },
        "health": {
          "$ref": "#/definitions/HealthState",
          "readOnly": true
        }
      }
    },
    "GatewayServerProperties": {
      "description": "Defines the Epic Gateway Server properties.",
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int64",
          "description": "The gateway Port.",
          "readOnly": true,
          "x-nullable": true
        },
        "health": {
          "$ref": "#/definitions/HealthState",
          "readOnly": true
        }
      }
    },
    "EnqueueReplicationServerProperties": {
      "description": "Defines the Epic ERS Server properties.",
      "type": "object",
      "properties": {
        "ersVersion": {
          "$ref": "#/definitions/EnqueueReplicationServerType",
          "readOnly": true
        },
        "instanceNo": {
          "type": "string",
          "description": "The ERS server instance id.",
          "readOnly": true
        },
        "hostname": {
          "type": "string",
          "description": "The ERS server Epic host name.",
          "readOnly": true
        },
        "kernelVersion": {
          "type": "string",
          "description": "The ERS server Epic kernel version.",
          "readOnly": true
        },
        "kernelPatch": {
          "type": "string",
          "description": "The ERS server Epic kernel patch.",
          "readOnly": true
        },
        "ipAddress": {
          "type": "string",
          "description": "The ERS server Epic IP Address.",
          "readOnly": true
        },
        "health": {
          "$ref": "#/definitions/HealthState",
          "readOnly": true
        }
      }
    },
    "EpicPresentationServerProperties": {
      "description": "Defines the Epic Presentation Server properties.",
      "type": "object",
      "properties": {
        "instanceNo": {
          "type": "string",
          "description": "The presentation server instance id.",
          "readOnly": true
        },
        "subnet": {
          "type": "string",
          "description": "The presentation server subnet.",
          "readOnly": true
        },
        "messageServerProperties": {
          "$ref": "#/definitions/MessageServerProperties"
        },
        "enqueueServerProperties": {
          "$ref": "#/definitions/EnqueueServerProperties"
        },
        "gatewayServerProperties": {
          "$ref": "#/definitions/GatewayServerProperties"
        },
        "enqueueReplicationServerProperties": {
          "$ref": "#/definitions/EnqueueReplicationServerProperties"
        },
        "kernelVersion": {
          "type": "string",
          "description": "The central server kernel version.",
          "readOnly": true,
          "x-nullable": true
        },
        "kernelPatch": {
          "type": "string",
          "description": "The central server kernel patch.",
          "readOnly": true,
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/EpicVirtualInstanceStatus",
          "readOnly": true
        },
        "health": {
          "$ref": "#/definitions/HealthState",
          "readOnly": true
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "readOnly": true
        },
        "errors": {
          "description": "Defines the Central Instance errors.",
          "readOnly": true,
          "$ref": "#/definitions/EpicVirtualInstanceError"
        }
      }
    },
    "EpicPresentationServerInstance": {
      "description": "Define the Epic Presentation Server Instance.",
      "type": "object",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ],
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/EpicPresentationServerProperties"
        }
      }
    },
    "NetworkConfiguration": {
      "description": "Defines the network configuration for Epic infrastructure",
      "type": "object",
      "properties": {
        "isSecondaryIpEnabled": {
          "type": "boolean",
          "description": "Specifies whether a secondary IP address should be added to the network interface on all VMs",
          "default": false
        }
      }
    },
    "ErrorDefinition": {
      "type": "object",
      "description": "Error definition.",
      "properties": {
        "code": {
          "description": "Service specific error code which serves as the substatus for the HTTP error code.",
          "type": "string",
          "readOnly": true
        },
        "message": {
          "description": "Description of the error.",
          "type": "string",
          "readOnly": true
        },
        "details": {
          "description": "Internal error details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDefinition"
          },
          "x-ms-identifiers": [],
          "readOnly": true
        }
      }
    }
  },
  "parameters": {
    "EpicVirtualInstanceNameParameter": {
      "name": "epicVirtualInstanceName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the Virtual Instances for Epic.",
      "x-ms-parameter-location": "method"
    },
    "PresentationInstanceNameParameter": {
      "name": "presentationInstanceName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Presentation Instance name string modeled as parameter for auto generation to work correctly.",
      "x-ms-parameter-location": "method"
    }
  }
}
