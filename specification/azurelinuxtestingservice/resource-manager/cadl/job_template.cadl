namespace Microsoft.AzureLinuxTestingService;

using Cadl.Http;
using Cadl.Rest;
using Cadl.Versioning;
using Azure.ResourceManager;
using Azure.ResourceManager.Foundations;
using Autorest;
using Azure.Core;
using Azure.Core.Foundations;

@doc("A template defining the parameters for a test job.")
model JobTemplate is TrackedResource<JobTemplateResourceProperties> {
    @doc("Job template name")
    @pattern("^[a-zA-Z0-9-]{3,24}$")
    @key("templateName")
    @segment("templates")
    @visibility("read")
    @path()
    name: string; 
}

@doc("The job template properties")
model JobTemplateResourceProperties is ResourceProperties{
    @doc("Tags used to organized templates.")
    templateTags: string[];

    @doc("Azure region to run test in.")
    region: string[];

    @doc("VM sizes to run test on.")
    vmSize: string[];

    @doc("Test Selections. Default is to run the smoke_test case")
    selections: Selections[];

    @doc("The number of concurrent environments. Default is 4.")
    concurrency?: int32 = 4;
}

enum TestCaseAction {
  Include,
  Exclude,
  ForceInclude,
  ForceExclude
}

@doc("Details test case criteria")
model Selections {
    @doc("Test case name. Default is empty.")
    caseName?: string[] = [];

    @doc("Test case area. Default is empty.")
    caseArea?: string[] = [];

    @doc("Test case category. Default is empty.")
    caseCategory?: string[] = [];

    @doc("Test case priority. Default is empty and represents all priorities. Valid values are from 0-4")
    casePriority: int32[];

    @doc("Test case tags. Default empty")
    caseTags?: string[] = [];

    @doc("Action to take. Default is include")
    action?: TestCaseAction = TestCaseAction.Include;

    @doc("Test iterations to run. Default 1")
    testIterations?: int32 = 1;

    @doc("Retry on failure. Default 0")
    retryCount?: int32 = 0;

    @doc("Use new environment for each test case. Default false")
    useNewEnvironment?: boolean = false;

    @doc("Ignore failed test cases")
    ignoreFailure: boolean;
}

@doc("Job template operations.")
@armResourceOperations(JobTemplate)
/*
interface JobTemplateOperations
    extends ResourceOperations<JobTemplate, JobTemplateResourceProperties> {
}
*/
interface JobTemplates {
  get is ArmResourceRead<JobTemplate>;
  createOrUpdate is ArmResourceCreateOrUpdateAsync<JobTemplate>;
  update is ArmResourcePatchSync<JobTemplate, JobTemplateResourceProperties>;
  @asyncOperationOptions("location")
  delete is ArmResourceDeleteAsync<JobTemplate>;
  listByResourceGroup is ArmResourceListByParent<JobTemplate>;
  listbySubscription is ArmListBySubscription<JobTemplate>;
}
