{
  "swagger": "2.0",
  "info": {
    "title": "Orkestra",
    "description": "The Microsoft.Orkestra Rest API spec.",
    "version": "2021-01-15-preview",
    "x-ms-code-generation-settings": {
      "name": "OrkestraClient"
    }
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orkestra/applications/{applicationsName}": {
      "get": {
        "operationId": "applications_Retrieve",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/applicationsNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the applications resource.",
            "schema": {
              "$ref": "#/definitions/applications"
            }
          }
        }
      },
      "put": {
        "operationId": "applications_CreateOrUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/applicationsNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "applications",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/applications"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updates the applications resource.",
            "schema": {
              "$ref": "#/definitions/applications"
            }
          },
          "201": {
            "description": "Creates the applications resource.",
            "schema": {
              "$ref": "#/definitions/applications"
            }
          }
        }
      },
      "delete": {
        "operationId": "applications_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/applicationsNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Deletes the applications resource."
          }
        }
      },
      "patch": {
        "operationId": "applications_Update",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/applicationsNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "applications",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/applicationsPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updates the applications resource.",
            "schema": {
              "$ref": "#/definitions/applications"
            }
          },
          "201": {
            "description": "Updates the applications resource.",
            "schema": {
              "$ref": "#/definitions/applications"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orkestra/applications": {
      "get": {
        "operationId": "applications_ListByResourceGroup",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Lists all applications under the resouce group.",
            "schema": {
              "$ref": "#/definitions/applicationsListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Orkestra/applications": {
      "get": {
        "operationId": "applications_ListBySubscription",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Lists all applications under the subscription.",
            "schema": {
              "$ref": "#/definitions/applicationsListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/providers/Microsoft.Orkestra/operations": {
      "get": {
        "operationId": "Operations_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Describe the result of a successful operation.",
            "schema": {
              "$ref": "#/definitions/ResourceProviderOperationList"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "definitions": {
    "applicationsProperties": {
      "type": "object",
      "properties": {
        "chart": {
          "type": "object",
          "properties": {
            "chartPullSecret": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "description": "ChartPullSecret holds the reference to the authentication secret for accessing the Helm repository using HTTPS basic auth. NOT IMPLEMENTED!"
            },
            "git": {
              "type": "string",
              "description": "Git URL is the URL of the Git repository, e.g. `git@github.com:org/repo`, `http://github.com/org/repo`, or `ssh://git@example.com:2222/org/repo.git`."
            },
            "name": {
              "type": "string",
              "description": "Name is the name of the Helm chart _without_ an alias, e.g. redis (for `helm upgrade [flags] stable/redis`)."
            },
            "path": {
              "type": "string",
              "description": "Path is the path to the chart relative to the repository root."
            },
            "ref": {
              "type": "string",
              "description": "Ref is the Git branch (or other reference) to use. Defaults to 'master', or the configured default Git ref."
            },
            "repository": {
              "type": "string",
              "description": "RepoURL is the URL of the Helm repository, e.g. `https://kubernetes-charts.storage.googleapis.com` or `https://charts.example.com`."
            },
            "secretRef": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "description": "SecretRef holds the authentication secret for accessing the Git repository (over HTTPS). The credentials will be added to an HTTPS GitURL before the mirror is started."
            },
            "skipDepUpdate": {
              "type": "boolean",
              "description": "SkipDepUpdate will tell the operator to skip running 'helm dep update' before installing or upgrading the chart, the chart dependencies _must_ be present for this to succeed."
            },
            "version": {
              "type": "string",
              "description": "Version is the targeted Helm chart version, e.g. 7.0.1."
            }
          }
        },
        "disableOpenAPIValidation": {
          "type": "boolean",
          "description": "DisableOpenAPIValidation controls whether OpenAPI validation is enforced."
        },
        "forceUpgrade": {
          "type": "boolean",
          "description": "Force will mark this Helm release to `--force` upgrades. This forces the resource updates through delete/recreate if needed."
        },
        "helmVersion": {
          "type": "string",
          "description": "HelmVersion is the version of Helm to target. If not supplied, the lowest _enabled Helm version_ will be targeted. Valid HelmVersion values are: \"v2\", \"v3\"",
          "enum": [
            "v2",
            "v3"
          ]
        },
        "maxHistory": {
          "type": "integer",
          "description": "MaxHistory is the maximum amount of revisions to keep for the Helm release. If not supplied, it defaults to 10."
        },
        "namespace": {
          "type": "string",
          "description": "Namespace to which the HelmRelease object will be deployed"
        },
        "releaseName": {
          "type": "string",
          "description": "ReleaseName is the name of the The Helm release. If not supplied, it will be generated by affixing the namespace to the resource name."
        },
        "resetValues": {
          "type": "boolean",
          "description": "ResetValues will mark this Helm release to reset the values to the defaults of the targeted chart before performing an upgrade. Not explicitly setting this to `false` equals to `true` due to the declarative nature of the operator."
        },
        "rollback": {
          "type": "object",
          "properties": {
            "disableHooks": {
              "type": "boolean",
              "description": "DisableHooks will mark this Helm release to prevent hooks from running during the rollback."
            },
            "enable": {
              "type": "boolean",
              "description": "Enable will mark this Helm release for rollbacks."
            },
            "force": {
              "type": "boolean",
              "description": "Force will mark this Helm release to `--force` rollbacks. This forces the resource updates through delete/recreate if needed."
            },
            "maxRetries": {
              "type": "integer",
              "format": "int64",
              "description": "MaxRetries is the maximum amount of upgrade retries the operator should make before bailing."
            },
            "recreate": {
              "type": "boolean",
              "description": "Recreate will mark this Helm release to `--recreate-pods` for if applicable. This performs pod restarts."
            },
            "retry": {
              "type": "boolean",
              "description": "Retry will mark this Helm release for upgrade retries after a rollback."
            },
            "timeout": {
              "type": "integer",
              "format": "int64",
              "description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during rollback."
            },
            "wait": {
              "type": "boolean",
              "description": "Wait will mark this Helm release to wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful."
            }
          },
          "description": "The rollback settings for this Helm release."
        },
        "skipCRDs": {
          "type": "boolean",
          "description": "SkipCRDs will mark this Helm release to skip the creation of CRDs during a Helm 3 installation."
        },
        "subcharts": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "dependencies": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "targetNamespace": {
          "type": "string",
          "description": "TargetNamespace overrides the targeted namespace for the Helm release. The default namespace equals to the namespace of the HelmRelease resource."
        },
        "test": {
          "type": "object",
          "properties": {
            "cleanup": {
              "type": "boolean",
              "description": "Cleanup, when targeting Helm 2, determines whether to delete test pods between each test run initiated by the Helm Operator."
            },
            "enable": {
              "type": "boolean",
              "description": "Enable will mark this Helm release for tests."
            },
            "ignoreFailures": {
              "type": "boolean",
              "description": "IgnoreFailures will cause a Helm release to be rolled back if it fails otherwise it will be left in a released state"
            },
            "timeout": {
              "type": "integer",
              "format": "int64",
              "description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during test."
            }
          },
          "description": "The test settings for this Helm release."
        },
        "timeout": {
          "type": "integer",
          "format": "int64",
          "description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during installation and upgrade operations."
        },
        "valueFileSecrets": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          },
          "description": "ValueFileSecrets holds the local name references to secrets. DEPRECATED, use ValuesFrom.secretKeyRef instead."
        },
        "values": {
          "type": "object",
          "description": "Values holds the values for this Helm release."
        },
        "valuesFrom": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "chartFileRef": {
                "type": "object",
                "properties": {
                  "optional": {
                    "type": "boolean",
                    "description": "Optional will mark this ChartFileSelector as optional. The result of this are that operations are permitted without the source, due to it e.g. being temporarily unavailable."
                  },
                  "path": {
                    "type": "string",
                    "description": "Path is the file path to the source relative to the chart root."
                  }
                },
                "required": [
                  "path"
                ],
                "description": "The reference to a local chart file with release values."
              },
              "configMapKeyRef": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": "string"
                  },
                  "optional": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ],
                "description": "The reference to a config map with release values."
              },
              "externalSourceRef": {
                "type": "object",
                "properties": {
                  "optional": {
                    "type": "boolean",
                    "description": "Optional will mark this ExternalSourceSelector as optional. The result of this are that operations are permitted without the source, due to it e.g. being temporarily unavailable."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL is the URL of the external source."
                  }
                },
                "required": [
                  "url"
                ],
                "description": "The reference to an external source with release values."
              },
              "secretKeyRef": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": "string"
                  },
                  "optional": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ],
                "description": "The reference to a secret with release values."
              }
            }
          }
        },
        "wait": {
          "type": "boolean",
          "description": "Wait will mark this Helm release to wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful."
        },
        "provisioningState": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "description": "ApplicationStatus defines the observed state of Application"
        }
      },
      "required": [
        "chart",
        "namespace"
      ],
      "description": "ApplicationSpec defines the desired state of Application"
    },
    "applications": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/applicationsProperties"
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "Resource Id"
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Resource Name"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Resource Type"
        },
        "location": {
          "type": "string",
          "description": "The resource location"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource tags"
        },
        "extendedLocation": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The extended location type."
            },
            "name": {
              "type": "string",
              "description": "The extended location name."
            }
          }
        }
      },
      "required": [
        "location"
      ],
      "description": "The applications resource definition."
    },
    "applicationsPatch": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource tags"
        }
      },
      "description": "The applications resource patch definition."
    },
    "applicationsListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/applications"
          }
        },
        "nextLink": {
          "type": "string"
        }
      }
    },
    "ResourceProviderOperationList": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceProviderOperation"
          }
        },
        "nextLink": {
          "type": "string"
        }
      },
      "description": "Results of the request to list operations."
    },
    "ResourceProviderOperation": {
      "type": "object",
      "properties": {
        "isDataAction": {
          "type": "string",
          "description": "Indicates whether the operation applies to data-plane."
        },
        "name": {
          "type": "string",
          "description": "Operation name, in format of {provider}/{resource}/{operation}"
        },
        "display": {
          "type": "object",
          "properties": {
            "provider": {
              "type": "string",
              "description": "The resource provider."
            },
            "resource": {
              "type": "string",
              "description": "Resource on which the operation is performed."
            },
            "operation": {
              "type": "string",
              "description": "Type of operation: get, read, delete, etc."
            },
            "description": {
              "type": "string",
              "description": "Description of this operation."
            }
          },
          "description": "Display metadata associated with the operation."
        }
      },
      "description": "Results of the request to list operations."
    }
  },
  "parameters": {
    "applicationsNameParameter": {
      "name": "applicationsName",
      "in": "path",
      "required": true,
      "type": "string",
      "maxLength": 64,
      "minLength": 3
    },
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)"
    },
    "ResourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the resource group."
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "The API version to be used with the HTTP request (e.g. YYYY-MM-DD)."
    }
  }
}
