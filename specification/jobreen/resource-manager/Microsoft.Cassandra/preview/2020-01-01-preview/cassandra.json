{
    "swagger": "2.0",
    "info": {
        "title": "Cassandra",
        "description": "The Microsoft.Cassandra Rest API spec.",
        "version": "2020-01-01-preview",
        "x-ms-code-generation-settings": {
            "name": "CassandraClient"
        }
    },
    "host": "management.azure.com",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cassandra/cassandraDataCenters/{cassandraDataCentersName}/testAction": {
            "post": {
                "operationId": "cassandraDataCenters_Action",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/cassandraDataCentersNameParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "name": "cassandraDataCenters",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cassandraDataCentersProperties"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updates the cassandraDataCenters resource.",
                        "schema": {
                            "$ref": "#/definitions/cassandraDataCentersProperties"
                        }
                    },
                    "202": {
                        "description": "Creates the cassandraDataCenters resource.",
                        "schema": {
                            "$ref": "#/definitions/cassandraDataCentersProperties"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cassandra/cassandraDataCenters/{cassandraDataCentersName}": {
            "get": {
                "operationId": "cassandraDataCenters_Retrieve",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/cassandraDataCentersNameParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieves the cassandraDataCenters resource.",
                        "schema": {
                            "$ref": "#/definitions/cassandraDataCenters"
                        }
                    }
                }
            },
            "put": {
                "operationId": "cassandraDataCenters_CreateOrUpdate",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/cassandraDataCentersNameParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "name": "cassandraDataCenters",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cassandraDataCenters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updates the cassandraDataCenters resource.",
                        "schema": {
                            "$ref": "#/definitions/cassandraDataCenters"
                        }
                    },
                    "201": {
                        "description": "Creates the cassandraDataCenters resource.",
                        "schema": {
                            "$ref": "#/definitions/cassandraDataCenters"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "cassandraDataCenters_Delete",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/cassandraDataCentersNameParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deletes the cassandraDataCenters resource."
                    }
                }
            },
            "patch": {
                "operationId": "cassandraDataCenters_Update",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/cassandraDataCentersNameParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "name": "cassandraDataCenters",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cassandraDataCentersPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updates the cassandraDataCenters resource.",
                        "schema": {
                            "$ref": "#/definitions/cassandraDataCenters"
                        }
                    },
                    "201": {
                        "description": "Updates the cassandraDataCenters resource.",
                        "schema": {
                            "$ref": "#/definitions/cassandraDataCenters"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cassandra/cassandraDataCenters": {
            "get": {
                "operationId": "cassandraDataCenters_ListByResourceGroup",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lists all cassandraDataCenters under the resouce group.",
                        "schema": {
                            "$ref": "#/definitions/cassandraDataCentersListResult"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "nextLink"
                }
            }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.Cassandra/cassandraDataCenters": {
            "get": {
                "operationId": "cassandraDataCenters_ListBySubscription",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lists all cassandraDataCenters under the subscription.",
                        "schema": {
                            "$ref": "#/definitions/cassandraDataCentersListResult"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "nextLink"
                }
            }
        },
        "/providers/Microsoft.Cassandra/operations": {
            "get": {
                "operationId": "Operations_List",
                "parameters": [
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Describe the result of a successful operation.",
                        "schema": {
                            "$ref": "#/definitions/ResourceProviderOperationList"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "nextLink"
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cassandra/vcenters/{vcenterName}": {
            "put": {
                "tags": [
                    "VCenters"
                ],
                "operationId": "VCenters_Create",
                "description": "Create Or Update vCenter.",
                "summary": "Implements vCenter PUT method.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "in": "path",
                        "name": "vcenterName",
                        "required": true,
                        "type": "string",
                        "description": "Name of the vCenter."
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Request payload.",
                        "schema": {
                            "$ref": "#/definitions/VCenter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VCenter"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/VCenter"
                        }
                    },
                    "default": {
                        "description": "Error response describing why the operation failed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "x-ms-long-running-operation": true,
                "x-ms-long-running-operation-options": {
                    "final-state-via": "azure-async-operation"
                }
            },
            "get": {
                "tags": [
                    "VCenters"
                ],
                "operationId": "VCenters_Get",
                "summary": "Gets a vCenter.",
                "description": "Implements vCenter GET method.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "in": "path",
                        "name": "vcenterName",
                        "required": true,
                        "type": "string",
                        "description": "Name of the vCenter."
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VCenter"
                        }
                    },
                    "default": {
                        "description": "Error response describing why the operation failed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "VCenters"
                ],
                "operationId": "VCenters_Update",
                "summary": "Updates a vCenter.",
                "description": "API to update certain properties of the vCenter resource.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "in": "path",
                        "name": "vcenterName",
                        "required": true,
                        "type": "string",
                        "description": "Name of the vCenter."
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Resource properties to update.",
                        "schema": {
                            "$ref": "#/definitions/ResourcePatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VCenter"
                        }
                    },
                    "default": {
                        "description": "Error response describing why the operation failed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "VCenters"
                ],
                "operationId": "VCenters_Delete",
                "summary": "Deletes an vCenter.",
                "description": "Implements vCenter DELETE method.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "in": "path",
                        "name": "vcenterName",
                        "required": true,
                        "type": "string",
                        "description": "Name of the vCenter."
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "in": "query",
                        "name": "force",
                        "description": "Whether force delete was specified.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "202": {
                        "description": "Accepted"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "default": {
                        "description": "Error response describing why the operation failed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "x-ms-long-running-operation": true
            }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.Cassandra/vcenters": {
            "get": {
                "tags": [
                    "VCenters"
                ],
                "operationId": "VCenters_List",
                "summary": "Implements GET vCenters in a subscription.",
                "description": "List of vCenters in a subscription.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VCentersList"
                        }
                    },
                    "default": {
                        "description": "Error response describing why the operation failed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "nextLink"
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cassandra/vcenters": {
            "get": {
                "tags": [
                    "VCenters"
                ],
                "operationId": "VCenters_ListByResourceGroup",
                "summary": "Implements GET vCenters in a resource group.",
                "description": "List of vCenters in a resource group.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VCentersList"
                        }
                    },
                    "default": {
                        "description": "Error response describing why the operation failed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "nextLink"
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cassandra/vcenters/{vcenterName}/inventoryItems/{inventoryItemName}": {
            "put": {
                "tags": [
                    "InventoryItems"
                ],
                "operationId": "InventoryItems_Create",
                "description": "Create Or Update InventoryItem.",
                "summary": "Implements InventoryItem PUT method.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "in": "path",
                        "name": "vcenterName",
                        "required": true,
                        "type": "string",
                        "description": "Name of the vCenter."
                    },
                    {
                        "in": "path",
                        "name": "inventoryItemName",
                        "required": true,
                        "type": "string",
                        "description": "Name of the inventoryItem."
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Request payload.",
                        "schema": {
                            "$ref": "#/definitions/InventoryItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/InventoryItem"
                        }
                    },
                    "default": {
                        "description": "Error response describing why the operation failed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "InventoryItems"
                ],
                "operationId": "InventoryItems_Get",
                "summary": "Gets InventoryItem.",
                "description": "Implements InventoryItem GET method.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "in": "path",
                        "name": "vcenterName",
                        "required": true,
                        "type": "string",
                        "description": "Name of the vCenter."
                    },
                    {
                        "in": "path",
                        "name": "inventoryItemName",
                        "required": true,
                        "type": "string",
                        "description": "Name of the inventoryItem."
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/InventoryItem"
                        }
                    },
                    "default": {
                        "description": "Error response describing why the operation failed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "InventoryItems"
                ],
                "operationId": "InventoryItems_Delete",
                "summary": "Deletes an inventoryItem.",
                "description": "Implements inventoryItem DELETE method.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "in": "path",
                        "name": "vcenterName",
                        "required": true,
                        "type": "string",
                        "description": "Name of the vCenter."
                    },
                    {
                        "in": "path",
                        "name": "inventoryItemName",
                        "required": true,
                        "type": "string",
                        "description": "Name of the inventoryItem."
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "default": {
                        "description": "Error response describing why the operation failed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cassandra/vcenters/{vcenterName}/inventoryItems": {
            "get": {
                "tags": [
                    "InventoryItems"
                ],
                "operationId": "InventoryItems_ListByVCenter",
                "summary": "Implements GET inventoryItems in a vCenter.",
                "description": "Returns the list of inventoryItems of the given vCenter.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "in": "path",
                        "name": "vcenterName",
                        "required": true,
                        "type": "string",
                        "description": "Name of the vCenter."
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/InventoryItemsList"
                        }
                    },
                    "default": {
                        "description": "Error response describing why the operation failed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "nextLink"
                }
            }
        }
    },
    "definitions": {
        "cassandraDataCentersProperties": {
            "properties": {
                "cluster": {
                    "type": "string"
                },
                "datacenter": {
                    "type": "string"
                },
                "cassandraAuth": {
                    "type": "object",
                    "properties": {
                        "authenticator": {
                            "type": "string"
                        },
                        "authorizer": {
                            "type": "string"
                        },
                        "roleManager": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "authenticator",
                        "authorizer",
                        "roleManager"
                    ]
                },
                "cassandraEnv": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the environment variable. Must be a C_IDENTIFIER."
                            },
                            "value": {
                                "type": "string",
                                "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
                            },
                            "valueFrom": {
                                "type": "object",
                                "properties": {
                                    "configMapKeyRef": {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "string",
                                                "description": "The key to select."
                                            },
                                            "name": {
                                                "type": "string",
                                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                                            },
                                            "optional": {
                                                "type": "boolean",
                                                "description": "Specify whether the ConfigMap or its key must be defined"
                                            }
                                        },
                                        "required": [
                                            "key"
                                        ],
                                        "description": "Selects a key of a ConfigMap."
                                    },
                                    "fieldRef": {
                                        "type": "object",
                                        "properties": {
                                            "apiVersion": {
                                                "type": "string",
                                                "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
                                            },
                                            "fieldPath": {
                                                "type": "string",
                                                "description": "Path of the field to select in the specified API version."
                                            }
                                        },
                                        "required": [
                                            "fieldPath"
                                        ],
                                        "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP."
                                    },
                                    "resourceFieldRef": {
                                        "type": "object",
                                        "properties": {
                                            "containerName": {
                                                "type": "string",
                                                "description": "Container name: required for volumes, optional for env vars"
                                            },
                                            "divisor": {
                                                "type": "string",
                                                "description": "Specifies the output format of the exposed resources, defaults to \"1\""
                                            },
                                            "resource": {
                                                "type": "string",
                                                "description": "Required: resource to select"
                                            }
                                        },
                                        "required": [
                                            "resource"
                                        ],
                                        "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported."
                                    },
                                    "secretKeyRef": {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "string",
                                                "description": "The key of the secret to select from.  Must be a valid secret key."
                                            },
                                            "name": {
                                                "type": "string",
                                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                                            },
                                            "optional": {
                                                "type": "boolean",
                                                "description": "Specify whether the Secret or its key must be defined"
                                            }
                                        },
                                        "required": [
                                            "key"
                                        ],
                                        "description": "Selects a key of a secret in the pod's namespace"
                                    }
                                },
                                "description": "Source for the environment variable's value. Cannot be used if value is not empty."
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "EnvVar represents an environment variable present in a Container."
                    },
                    "properties": {
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name of the environment variable. Must be a C_IDENTIFIER."
                                },
                                "value": {
                                    "type": "string",
                                    "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
                                },
                                "valueFrom": {
                                    "type": "object",
                                    "properties": {
                                        "configMapKeyRef": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "string",
                                                    "description": "The key to select."
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                                                },
                                                "optional": {
                                                    "type": "boolean",
                                                    "description": "Specify whether the ConfigMap or its key must be defined"
                                                }
                                            },
                                            "required": [
                                                "key"
                                            ],
                                            "description": "Selects a key of a ConfigMap."
                                        },
                                        "fieldRef": {
                                            "type": "object",
                                            "properties": {
                                                "apiVersion": {
                                                    "type": "string",
                                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
                                                },
                                                "fieldPath": {
                                                    "type": "string",
                                                    "description": "Path of the field to select in the specified API version."
                                                }
                                            },
                                            "required": [
                                                "fieldPath"
                                            ],
                                            "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP."
                                        },
                                        "resourceFieldRef": {
                                            "type": "object",
                                            "properties": {
                                                "containerName": {
                                                    "type": "string",
                                                    "description": "Container name: required for volumes, optional for env vars"
                                                },
                                                "divisor": {
                                                    "type": "string",
                                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\""
                                                },
                                                "resource": {
                                                    "type": "string",
                                                    "description": "Required: resource to select"
                                                }
                                            },
                                            "required": [
                                                "resource"
                                            ],
                                            "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported."
                                        },
                                        "secretKeyRef": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "string",
                                                    "description": "The key of the secret to select from.  Must be a valid secret key."
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                                                },
                                                "optional": {
                                                    "type": "boolean",
                                                    "description": "Specify whether the Secret or its key must be defined"
                                                }
                                            },
                                            "required": [
                                                "key"
                                            ],
                                            "description": "Selects a key of a secret in the pod's namespace"
                                        }
                                    },
                                    "description": "Source for the environment variable's value. Cannot be used if value is not empty."
                                }
                            },
                            "required": [
                                "name"
                            ],
                            "description": "EnvVar represents an environment variable present in a Container."
                        }
                    }
                },
                "cassandraImage": {
                    "type": "string"
                },
                "dataVolumeClaimSpec": {
                    "type": "object",
                    "properties": {
                        "accessModes": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "properties": {
                                "items": {
                                    "type": "string"
                                }
                            },
                            "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1"
                        },
                        "dataSource": {
                            "type": "object",
                            "properties": {
                                "apiGroup": {
                                    "type": "string",
                                    "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                    "type": "string",
                                    "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name is the name of resource being referenced"
                                }
                            },
                            "required": [
                                "kind",
                                "name"
                            ],
                            "description": "This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change."
                        },
                        "resources": {
                            "type": "object",
                            "properties": {
                                "limits": {
                                    "type": "object",
                                    "properties": {
                                        "additionalProperties": {
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
                                },
                                "requests": {
                                    "type": "object",
                                    "properties": {
                                        "additionalProperties": {
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
                                }
                            },
                            "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
                        },
                        "selector": {
                            "type": "object",
                            "properties": {
                                "matchExpressions": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "string",
                                                "description": "key is the label key that the selector applies to."
                                            },
                                            "operator": {
                                                "type": "string",
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                            },
                                            "values": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "properties": {
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                            }
                                        },
                                        "required": [
                                            "key",
                                            "operator"
                                        ],
                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                    },
                                    "properties": {
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "string",
                                                    "description": "key is the label key that the selector applies to."
                                                },
                                                "operator": {
                                                    "type": "string",
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                },
                                                "values": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "properties": {
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                }
                                            },
                                            "required": [
                                                "key",
                                                "operator"
                                            ],
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                        }
                                    },
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                },
                                "matchLabels": {
                                    "type": "object",
                                    "properties": {
                                        "additionalProperties": {
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                }
                            },
                            "description": "A label query over volumes to consider for binding."
                        },
                        "storageClassName": {
                            "type": "string",
                            "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                        },
                        "volumeMode": {
                            "type": "string",
                            "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                        },
                        "volumeName": {
                            "type": "string",
                            "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                        }
                    },
                    "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes"
                },
                "deletePVCs": {
                    "type": "boolean"
                },
                "dummyVolume": {
                    "type": "object",
                    "properties": {
                        "medium": {
                            "type": "string",
                            "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
                        },
                        "sizeLimit": {
                            "type": "string",
                            "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir"
                        }
                    },
                    "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling."
                },
                "fsGroup": {
                    "type": "integer",
                    "format": "int64"
                },
                "imagePullPolicy": {
                    "type": "string",
                    "description": "PullPolicy describes a policy for if/when to pull a container image"
                },
                "imagePullSecrets": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                            }
                        },
                        "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace."
                    },
                    "properties": {
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                                }
                            },
                            "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace."
                        }
                    }
                },
                "initImage": {
                    "type": "string"
                },
                "nodes": {
                    "type": "integer",
                    "format": "int32"
                },
                "operatorAnnotations": {
                    "type": "object",
                    "properties": {
                        "nodesService": {
                            "type": "object",
                            "properties": {
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "podTemplate": {
                            "type": "object",
                            "properties": {
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "prometheusService": {
                            "type": "object",
                            "properties": {
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "seedNodesService": {
                            "type": "object",
                            "properties": {
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "statefulSet": {
                            "type": "object",
                            "properties": {
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "operatorLabels": {
                    "type": "object",
                    "properties": {
                        "nodesService": {
                            "type": "object",
                            "properties": {
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "podTemplate": {
                            "type": "object",
                            "properties": {
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "prometheusService": {
                            "type": "object",
                            "properties": {
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "seedNodesService": {
                            "type": "object",
                            "properties": {
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "statefulSet": {
                            "type": "object",
                            "properties": {
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "optimizeKernelParams": {
                    "type": "boolean"
                },
                "prometheusSupport": {
                    "type": "boolean"
                },
                "racks": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "affinity": {
                                "type": "object",
                                "properties": {
                                    "nodeAffinity": {
                                        "type": "object",
                                        "properties": {
                                            "preferredDuringSchedulingIgnoredDuringExecution": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "preference": {
                                                            "type": "object",
                                                            "properties": {
                                                                "matchExpressions": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "key": {
                                                                                "type": "string",
                                                                                "description": "The label key that the selector applies to."
                                                                            },
                                                                            "operator": {
                                                                                "type": "string",
                                                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                            },
                                                                            "values": {
                                                                                "type": "array",
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "properties": {
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "key",
                                                                            "operator"
                                                                        ],
                                                                        "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                    },
                                                                    "properties": {
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "The label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        }
                                                                    },
                                                                    "description": "A list of node selector requirements by node's labels."
                                                                },
                                                                "matchFields": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "key": {
                                                                                "type": "string",
                                                                                "description": "The label key that the selector applies to."
                                                                            },
                                                                            "operator": {
                                                                                "type": "string",
                                                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                            },
                                                                            "values": {
                                                                                "type": "array",
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "properties": {
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "key",
                                                                            "operator"
                                                                        ],
                                                                        "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                    },
                                                                    "properties": {
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "The label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        }
                                                                    },
                                                                    "description": "A list of node selector requirements by node's fields."
                                                                }
                                                            },
                                                            "description": "A node selector term, associated with the corresponding weight."
                                                        },
                                                        "weight": {
                                                            "type": "integer",
                                                            "format": "int32",
                                                            "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100."
                                                        }
                                                    },
                                                    "required": [
                                                        "preference",
                                                        "weight"
                                                    ],
                                                    "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op)."
                                                },
                                                "properties": {
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "preference": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "The label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "The label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            }
                                                                        },
                                                                        "description": "A list of node selector requirements by node's labels."
                                                                    },
                                                                    "matchFields": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "The label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "The label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            }
                                                                        },
                                                                        "description": "A list of node selector requirements by node's fields."
                                                                    }
                                                                },
                                                                "description": "A node selector term, associated with the corresponding weight."
                                                            },
                                                            "weight": {
                                                                "type": "integer",
                                                                "format": "int32",
                                                                "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100."
                                                            }
                                                        },
                                                        "required": [
                                                            "preference",
                                                            "weight"
                                                        ],
                                                        "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op)."
                                                    }
                                                },
                                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred."
                                            },
                                            "requiredDuringSchedulingIgnoredDuringExecution": {
                                                "type": "object",
                                                "properties": {
                                                    "nodeSelectorTerms": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "matchExpressions": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "key": {
                                                                                "type": "string",
                                                                                "description": "The label key that the selector applies to."
                                                                            },
                                                                            "operator": {
                                                                                "type": "string",
                                                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                            },
                                                                            "values": {
                                                                                "type": "array",
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "properties": {
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "key",
                                                                            "operator"
                                                                        ],
                                                                        "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                    },
                                                                    "properties": {
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "The label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        }
                                                                    },
                                                                    "description": "A list of node selector requirements by node's labels."
                                                                },
                                                                "matchFields": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "key": {
                                                                                "type": "string",
                                                                                "description": "The label key that the selector applies to."
                                                                            },
                                                                            "operator": {
                                                                                "type": "string",
                                                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                            },
                                                                            "values": {
                                                                                "type": "array",
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "properties": {
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "key",
                                                                            "operator"
                                                                        ],
                                                                        "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                    },
                                                                    "properties": {
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "The label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        }
                                                                    },
                                                                    "description": "A list of node selector requirements by node's fields."
                                                                }
                                                            },
                                                            "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm."
                                                        },
                                                        "properties": {
                                                            "items": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "The label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "The label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            }
                                                                        },
                                                                        "description": "A list of node selector requirements by node's labels."
                                                                    },
                                                                    "matchFields": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "The label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "The label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            }
                                                                        },
                                                                        "description": "A list of node selector requirements by node's fields."
                                                                    }
                                                                },
                                                                "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm."
                                                            }
                                                        },
                                                        "description": "Required. A list of node selector terms. The terms are ORed."
                                                    }
                                                },
                                                "required": [
                                                    "nodeSelectorTerms"
                                                ],
                                                "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node."
                                            }
                                        },
                                        "description": "Describes node affinity scheduling rules for the pod."
                                    },
                                    "podAffinity": {
                                        "type": "object",
                                        "properties": {
                                            "preferredDuringSchedulingIgnoredDuringExecution": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "podAffinityTerm": {
                                                            "type": "object",
                                                            "properties": {
                                                                "labelSelector": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "matchExpressions": {
                                                                            "type": "array",
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "key is the label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            },
                                                                            "properties": {
                                                                                "items": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                        "key": {
                                                                                            "type": "string",
                                                                                            "description": "key is the label key that the selector applies to."
                                                                                        },
                                                                                        "operator": {
                                                                                            "type": "string",
                                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                        },
                                                                                        "values": {
                                                                                            "type": "array",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "properties": {
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "key",
                                                                                        "operator"
                                                                                    ],
                                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                }
                                                                            },
                                                                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                        },
                                                                        "matchLabels": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "additionalProperties": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "additionalProperties": {
                                                                                "type": "string"
                                                                            },
                                                                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                        }
                                                                    },
                                                                    "description": "A label query over a set of resources, in this case pods."
                                                                },
                                                                "namespaces": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "properties": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                                },
                                                                "topologyKey": {
                                                                    "type": "string",
                                                                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                                }
                                                            },
                                                            "required": [
                                                                "topologyKey"
                                                            ],
                                                            "description": "Required. A pod affinity term, associated with the corresponding weight."
                                                        },
                                                        "weight": {
                                                            "type": "integer",
                                                            "format": "int32",
                                                            "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100."
                                                        }
                                                    },
                                                    "required": [
                                                        "podAffinityTerm",
                                                        "weight"
                                                    ],
                                                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)"
                                                },
                                                "properties": {
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "podAffinityTerm": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "labelSelector": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "matchExpressions": {
                                                                                "type": "array",
                                                                                "items": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                        "key": {
                                                                                            "type": "string",
                                                                                            "description": "key is the label key that the selector applies to."
                                                                                        },
                                                                                        "operator": {
                                                                                            "type": "string",
                                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                        },
                                                                                        "values": {
                                                                                            "type": "array",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "properties": {
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "key",
                                                                                        "operator"
                                                                                    ],
                                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                },
                                                                                "properties": {
                                                                                    "items": {
                                                                                        "type": "object",
                                                                                        "properties": {
                                                                                            "key": {
                                                                                                "type": "string",
                                                                                                "description": "key is the label key that the selector applies to."
                                                                                            },
                                                                                            "operator": {
                                                                                                "type": "string",
                                                                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                            },
                                                                                            "values": {
                                                                                                "type": "array",
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "properties": {
                                                                                                    "items": {
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "key",
                                                                                            "operator"
                                                                                        ],
                                                                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                    }
                                                                                },
                                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                            },
                                                                            "matchLabels": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "additionalProperties": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "additionalProperties": {
                                                                                    "type": "string"
                                                                                },
                                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                            }
                                                                        },
                                                                        "description": "A label query over a set of resources, in this case pods."
                                                                    },
                                                                    "namespaces": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                                    },
                                                                    "topologyKey": {
                                                                        "type": "string",
                                                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                                    }
                                                                },
                                                                "required": [
                                                                    "topologyKey"
                                                                ],
                                                                "description": "Required. A pod affinity term, associated with the corresponding weight."
                                                            },
                                                            "weight": {
                                                                "type": "integer",
                                                                "format": "int32",
                                                                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100."
                                                            }
                                                        },
                                                        "required": [
                                                            "podAffinityTerm",
                                                            "weight"
                                                        ],
                                                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)"
                                                    }
                                                },
                                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
                                            },
                                            "requiredDuringSchedulingIgnoredDuringExecution": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "labelSelector": {
                                                            "type": "object",
                                                            "properties": {
                                                                "matchExpressions": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "key": {
                                                                                "type": "string",
                                                                                "description": "key is the label key that the selector applies to."
                                                                            },
                                                                            "operator": {
                                                                                "type": "string",
                                                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                            },
                                                                            "values": {
                                                                                "type": "array",
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "properties": {
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "key",
                                                                            "operator"
                                                                        ],
                                                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                    },
                                                                    "properties": {
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "key is the label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        }
                                                                    },
                                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                },
                                                                "matchLabels": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "additionalProperties": {
                                                                        "type": "string"
                                                                    },
                                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                }
                                                            },
                                                            "description": "A label query over a set of resources, in this case pods."
                                                        },
                                                        "namespaces": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "properties": {
                                                                "items": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                        },
                                                        "topologyKey": {
                                                            "type": "string",
                                                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                        }
                                                    },
                                                    "required": [
                                                        "topologyKey"
                                                    ],
                                                    "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running"
                                                },
                                                "properties": {
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "labelSelector": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "key is the label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "key is the label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            }
                                                                        },
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                    },
                                                                    "matchLabels": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "additionalProperties": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                    }
                                                                },
                                                                "description": "A label query over a set of resources, in this case pods."
                                                            },
                                                            "namespaces": {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "properties": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                            },
                                                            "topologyKey": {
                                                                "type": "string",
                                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                            }
                                                        },
                                                        "required": [
                                                            "topologyKey"
                                                        ],
                                                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running"
                                                    }
                                                },
                                                "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
                                            }
                                        },
                                        "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s))."
                                    },
                                    "podAntiAffinity": {
                                        "type": "object",
                                        "properties": {
                                            "preferredDuringSchedulingIgnoredDuringExecution": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "podAffinityTerm": {
                                                            "type": "object",
                                                            "properties": {
                                                                "labelSelector": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "matchExpressions": {
                                                                            "type": "array",
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "key is the label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            },
                                                                            "properties": {
                                                                                "items": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                        "key": {
                                                                                            "type": "string",
                                                                                            "description": "key is the label key that the selector applies to."
                                                                                        },
                                                                                        "operator": {
                                                                                            "type": "string",
                                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                        },
                                                                                        "values": {
                                                                                            "type": "array",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "properties": {
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "key",
                                                                                        "operator"
                                                                                    ],
                                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                }
                                                                            },
                                                                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                        },
                                                                        "matchLabels": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "additionalProperties": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "additionalProperties": {
                                                                                "type": "string"
                                                                            },
                                                                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                        }
                                                                    },
                                                                    "description": "A label query over a set of resources, in this case pods."
                                                                },
                                                                "namespaces": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "properties": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                                },
                                                                "topologyKey": {
                                                                    "type": "string",
                                                                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                                }
                                                            },
                                                            "required": [
                                                                "topologyKey"
                                                            ],
                                                            "description": "Required. A pod affinity term, associated with the corresponding weight."
                                                        },
                                                        "weight": {
                                                            "type": "integer",
                                                            "format": "int32",
                                                            "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100."
                                                        }
                                                    },
                                                    "required": [
                                                        "podAffinityTerm",
                                                        "weight"
                                                    ],
                                                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)"
                                                },
                                                "properties": {
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "podAffinityTerm": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "labelSelector": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "matchExpressions": {
                                                                                "type": "array",
                                                                                "items": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                        "key": {
                                                                                            "type": "string",
                                                                                            "description": "key is the label key that the selector applies to."
                                                                                        },
                                                                                        "operator": {
                                                                                            "type": "string",
                                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                        },
                                                                                        "values": {
                                                                                            "type": "array",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "properties": {
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "key",
                                                                                        "operator"
                                                                                    ],
                                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                },
                                                                                "properties": {
                                                                                    "items": {
                                                                                        "type": "object",
                                                                                        "properties": {
                                                                                            "key": {
                                                                                                "type": "string",
                                                                                                "description": "key is the label key that the selector applies to."
                                                                                            },
                                                                                            "operator": {
                                                                                                "type": "string",
                                                                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                            },
                                                                                            "values": {
                                                                                                "type": "array",
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "properties": {
                                                                                                    "items": {
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "key",
                                                                                            "operator"
                                                                                        ],
                                                                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                    }
                                                                                },
                                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                            },
                                                                            "matchLabels": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "additionalProperties": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "additionalProperties": {
                                                                                    "type": "string"
                                                                                },
                                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                            }
                                                                        },
                                                                        "description": "A label query over a set of resources, in this case pods."
                                                                    },
                                                                    "namespaces": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                                    },
                                                                    "topologyKey": {
                                                                        "type": "string",
                                                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                                    }
                                                                },
                                                                "required": [
                                                                    "topologyKey"
                                                                ],
                                                                "description": "Required. A pod affinity term, associated with the corresponding weight."
                                                            },
                                                            "weight": {
                                                                "type": "integer",
                                                                "format": "int32",
                                                                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100."
                                                            }
                                                        },
                                                        "required": [
                                                            "podAffinityTerm",
                                                            "weight"
                                                        ],
                                                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)"
                                                    }
                                                },
                                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
                                            },
                                            "requiredDuringSchedulingIgnoredDuringExecution": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "labelSelector": {
                                                            "type": "object",
                                                            "properties": {
                                                                "matchExpressions": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "key": {
                                                                                "type": "string",
                                                                                "description": "key is the label key that the selector applies to."
                                                                            },
                                                                            "operator": {
                                                                                "type": "string",
                                                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                            },
                                                                            "values": {
                                                                                "type": "array",
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "properties": {
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "key",
                                                                            "operator"
                                                                        ],
                                                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                    },
                                                                    "properties": {
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "key is the label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        }
                                                                    },
                                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                },
                                                                "matchLabels": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "additionalProperties": {
                                                                        "type": "string"
                                                                    },
                                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                }
                                                            },
                                                            "description": "A label query over a set of resources, in this case pods."
                                                        },
                                                        "namespaces": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "properties": {
                                                                "items": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                        },
                                                        "topologyKey": {
                                                            "type": "string",
                                                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                        }
                                                    },
                                                    "required": [
                                                        "topologyKey"
                                                    ],
                                                    "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running"
                                                },
                                                "properties": {
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "labelSelector": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "key is the label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "key is the label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            }
                                                                        },
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                    },
                                                                    "matchLabels": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "additionalProperties": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                    }
                                                                },
                                                                "description": "A label query over a set of resources, in this case pods."
                                                            },
                                                            "namespaces": {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "properties": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                            },
                                                            "topologyKey": {
                                                                "type": "string",
                                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                            }
                                                        },
                                                        "required": [
                                                            "topologyKey"
                                                        ],
                                                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running"
                                                    }
                                                },
                                                "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
                                            }
                                        },
                                        "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s))."
                                    }
                                },
                                "description": "Affinity is a group of affinity scheduling rules."
                            },
                            "labels": {
                                "type": "object",
                                "properties": {
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "name": {
                                "type": "string"
                            },
                            "tolerations": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "effect": {
                                            "type": "string",
                                            "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."
                                        },
                                        "key": {
                                            "type": "string",
                                            "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."
                                        },
                                        "operator": {
                                            "type": "string",
                                            "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category."
                                        },
                                        "tolerationSeconds": {
                                            "type": "integer",
                                            "format": "int64",
                                            "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system."
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
                                        }
                                    },
                                    "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>."
                                },
                                "properties": {
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "effect": {
                                                "type": "string",
                                                "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."
                                            },
                                            "key": {
                                                "type": "string",
                                                "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."
                                            },
                                            "operator": {
                                                "type": "string",
                                                "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category."
                                            },
                                            "tolerationSeconds": {
                                                "type": "integer",
                                                "format": "int64",
                                                "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system."
                                            },
                                            "value": {
                                                "type": "string",
                                                "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
                                            }
                                        },
                                        "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>."
                                    }
                                }
                            }
                        },
                        "required": [
                            "labels",
                            "name"
                        ]
                    },
                    "properties": {
                        "items": {
                            "type": "object",
                            "properties": {
                                "affinity": {
                                    "type": "object",
                                    "properties": {
                                        "nodeAffinity": {
                                            "type": "object",
                                            "properties": {
                                                "preferredDuringSchedulingIgnoredDuringExecution": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "preference": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "The label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "The label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            }
                                                                        },
                                                                        "description": "A list of node selector requirements by node's labels."
                                                                    },
                                                                    "matchFields": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "The label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "The label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            }
                                                                        },
                                                                        "description": "A list of node selector requirements by node's fields."
                                                                    }
                                                                },
                                                                "description": "A node selector term, associated with the corresponding weight."
                                                            },
                                                            "weight": {
                                                                "type": "integer",
                                                                "format": "int32",
                                                                "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100."
                                                            }
                                                        },
                                                        "required": [
                                                            "preference",
                                                            "weight"
                                                        ],
                                                        "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op)."
                                                    },
                                                    "properties": {
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "preference": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "matchExpressions": {
                                                                            "type": "array",
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "The label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            },
                                                                            "properties": {
                                                                                "items": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                        "key": {
                                                                                            "type": "string",
                                                                                            "description": "The label key that the selector applies to."
                                                                                        },
                                                                                        "operator": {
                                                                                            "type": "string",
                                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                        },
                                                                                        "values": {
                                                                                            "type": "array",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "properties": {
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "key",
                                                                                        "operator"
                                                                                    ],
                                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                }
                                                                            },
                                                                            "description": "A list of node selector requirements by node's labels."
                                                                        },
                                                                        "matchFields": {
                                                                            "type": "array",
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "The label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            },
                                                                            "properties": {
                                                                                "items": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                        "key": {
                                                                                            "type": "string",
                                                                                            "description": "The label key that the selector applies to."
                                                                                        },
                                                                                        "operator": {
                                                                                            "type": "string",
                                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                        },
                                                                                        "values": {
                                                                                            "type": "array",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "properties": {
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "key",
                                                                                        "operator"
                                                                                    ],
                                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                }
                                                                            },
                                                                            "description": "A list of node selector requirements by node's fields."
                                                                        }
                                                                    },
                                                                    "description": "A node selector term, associated with the corresponding weight."
                                                                },
                                                                "weight": {
                                                                    "type": "integer",
                                                                    "format": "int32",
                                                                    "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100."
                                                                }
                                                            },
                                                            "required": [
                                                                "preference",
                                                                "weight"
                                                            ],
                                                            "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op)."
                                                        }
                                                    },
                                                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred."
                                                },
                                                "requiredDuringSchedulingIgnoredDuringExecution": {
                                                    "type": "object",
                                                    "properties": {
                                                        "nodeSelectorTerms": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "The label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "The label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            }
                                                                        },
                                                                        "description": "A list of node selector requirements by node's labels."
                                                                    },
                                                                    "matchFields": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "The label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "The label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            }
                                                                        },
                                                                        "description": "A list of node selector requirements by node's fields."
                                                                    }
                                                                },
                                                                "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm."
                                                            },
                                                            "properties": {
                                                                "items": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "matchExpressions": {
                                                                            "type": "array",
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "The label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            },
                                                                            "properties": {
                                                                                "items": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                        "key": {
                                                                                            "type": "string",
                                                                                            "description": "The label key that the selector applies to."
                                                                                        },
                                                                                        "operator": {
                                                                                            "type": "string",
                                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                        },
                                                                                        "values": {
                                                                                            "type": "array",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "properties": {
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "key",
                                                                                        "operator"
                                                                                    ],
                                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                }
                                                                            },
                                                                            "description": "A list of node selector requirements by node's labels."
                                                                        },
                                                                        "matchFields": {
                                                                            "type": "array",
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "The label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            },
                                                                            "properties": {
                                                                                "items": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                        "key": {
                                                                                            "type": "string",
                                                                                            "description": "The label key that the selector applies to."
                                                                                        },
                                                                                        "operator": {
                                                                                            "type": "string",
                                                                                            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                                                                        },
                                                                                        "values": {
                                                                                            "type": "array",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "properties": {
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "key",
                                                                                        "operator"
                                                                                    ],
                                                                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                }
                                                                            },
                                                                            "description": "A list of node selector requirements by node's fields."
                                                                        }
                                                                    },
                                                                    "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm."
                                                                }
                                                            },
                                                            "description": "Required. A list of node selector terms. The terms are ORed."
                                                        }
                                                    },
                                                    "required": [
                                                        "nodeSelectorTerms"
                                                    ],
                                                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node."
                                                }
                                            },
                                            "description": "Describes node affinity scheduling rules for the pod."
                                        },
                                        "podAffinity": {
                                            "type": "object",
                                            "properties": {
                                                "preferredDuringSchedulingIgnoredDuringExecution": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "podAffinityTerm": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "labelSelector": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "matchExpressions": {
                                                                                "type": "array",
                                                                                "items": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                        "key": {
                                                                                            "type": "string",
                                                                                            "description": "key is the label key that the selector applies to."
                                                                                        },
                                                                                        "operator": {
                                                                                            "type": "string",
                                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                        },
                                                                                        "values": {
                                                                                            "type": "array",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "properties": {
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "key",
                                                                                        "operator"
                                                                                    ],
                                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                },
                                                                                "properties": {
                                                                                    "items": {
                                                                                        "type": "object",
                                                                                        "properties": {
                                                                                            "key": {
                                                                                                "type": "string",
                                                                                                "description": "key is the label key that the selector applies to."
                                                                                            },
                                                                                            "operator": {
                                                                                                "type": "string",
                                                                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                            },
                                                                                            "values": {
                                                                                                "type": "array",
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "properties": {
                                                                                                    "items": {
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "key",
                                                                                            "operator"
                                                                                        ],
                                                                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                    }
                                                                                },
                                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                            },
                                                                            "matchLabels": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "additionalProperties": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "additionalProperties": {
                                                                                    "type": "string"
                                                                                },
                                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                            }
                                                                        },
                                                                        "description": "A label query over a set of resources, in this case pods."
                                                                    },
                                                                    "namespaces": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                                    },
                                                                    "topologyKey": {
                                                                        "type": "string",
                                                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                                    }
                                                                },
                                                                "required": [
                                                                    "topologyKey"
                                                                ],
                                                                "description": "Required. A pod affinity term, associated with the corresponding weight."
                                                            },
                                                            "weight": {
                                                                "type": "integer",
                                                                "format": "int32",
                                                                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100."
                                                            }
                                                        },
                                                        "required": [
                                                            "podAffinityTerm",
                                                            "weight"
                                                        ],
                                                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)"
                                                    },
                                                    "properties": {
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "podAffinityTerm": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "labelSelector": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "matchExpressions": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "object",
                                                                                        "properties": {
                                                                                            "key": {
                                                                                                "type": "string",
                                                                                                "description": "key is the label key that the selector applies to."
                                                                                            },
                                                                                            "operator": {
                                                                                                "type": "string",
                                                                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                            },
                                                                                            "values": {
                                                                                                "type": "array",
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "properties": {
                                                                                                    "items": {
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "key",
                                                                                            "operator"
                                                                                        ],
                                                                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "object",
                                                                                            "properties": {
                                                                                                "key": {
                                                                                                    "type": "string",
                                                                                                    "description": "key is the label key that the selector applies to."
                                                                                                },
                                                                                                "operator": {
                                                                                                    "type": "string",
                                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                                },
                                                                                                "values": {
                                                                                                    "type": "array",
                                                                                                    "items": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "properties": {
                                                                                                        "items": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "key",
                                                                                                "operator"
                                                                                            ],
                                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                        }
                                                                                    },
                                                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                                },
                                                                                "matchLabels": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                        "additionalProperties": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "additionalProperties": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                                }
                                                                            },
                                                                            "description": "A label query over a set of resources, in this case pods."
                                                                        },
                                                                        "namespaces": {
                                                                            "type": "array",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "properties": {
                                                                                "items": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                                        },
                                                                        "topologyKey": {
                                                                            "type": "string",
                                                                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "topologyKey"
                                                                    ],
                                                                    "description": "Required. A pod affinity term, associated with the corresponding weight."
                                                                },
                                                                "weight": {
                                                                    "type": "integer",
                                                                    "format": "int32",
                                                                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100."
                                                                }
                                                            },
                                                            "required": [
                                                                "podAffinityTerm",
                                                                "weight"
                                                            ],
                                                            "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)"
                                                        }
                                                    },
                                                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
                                                },
                                                "requiredDuringSchedulingIgnoredDuringExecution": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "labelSelector": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "key is the label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "key is the label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            }
                                                                        },
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                    },
                                                                    "matchLabels": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "additionalProperties": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                    }
                                                                },
                                                                "description": "A label query over a set of resources, in this case pods."
                                                            },
                                                            "namespaces": {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "properties": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                            },
                                                            "topologyKey": {
                                                                "type": "string",
                                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                            }
                                                        },
                                                        "required": [
                                                            "topologyKey"
                                                        ],
                                                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running"
                                                    },
                                                    "properties": {
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "labelSelector": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "matchExpressions": {
                                                                            "type": "array",
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "key is the label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            },
                                                                            "properties": {
                                                                                "items": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                        "key": {
                                                                                            "type": "string",
                                                                                            "description": "key is the label key that the selector applies to."
                                                                                        },
                                                                                        "operator": {
                                                                                            "type": "string",
                                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                        },
                                                                                        "values": {
                                                                                            "type": "array",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "properties": {
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "key",
                                                                                        "operator"
                                                                                    ],
                                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                }
                                                                            },
                                                                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                        },
                                                                        "matchLabels": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "additionalProperties": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "additionalProperties": {
                                                                                "type": "string"
                                                                            },
                                                                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                        }
                                                                    },
                                                                    "description": "A label query over a set of resources, in this case pods."
                                                                },
                                                                "namespaces": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "properties": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                                },
                                                                "topologyKey": {
                                                                    "type": "string",
                                                                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                                }
                                                            },
                                                            "required": [
                                                                "topologyKey"
                                                            ],
                                                            "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running"
                                                        }
                                                    },
                                                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
                                                }
                                            },
                                            "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s))."
                                        },
                                        "podAntiAffinity": {
                                            "type": "object",
                                            "properties": {
                                                "preferredDuringSchedulingIgnoredDuringExecution": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "podAffinityTerm": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "labelSelector": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "matchExpressions": {
                                                                                "type": "array",
                                                                                "items": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                        "key": {
                                                                                            "type": "string",
                                                                                            "description": "key is the label key that the selector applies to."
                                                                                        },
                                                                                        "operator": {
                                                                                            "type": "string",
                                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                        },
                                                                                        "values": {
                                                                                            "type": "array",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "properties": {
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "key",
                                                                                        "operator"
                                                                                    ],
                                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                },
                                                                                "properties": {
                                                                                    "items": {
                                                                                        "type": "object",
                                                                                        "properties": {
                                                                                            "key": {
                                                                                                "type": "string",
                                                                                                "description": "key is the label key that the selector applies to."
                                                                                            },
                                                                                            "operator": {
                                                                                                "type": "string",
                                                                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                            },
                                                                                            "values": {
                                                                                                "type": "array",
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "properties": {
                                                                                                    "items": {
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "key",
                                                                                            "operator"
                                                                                        ],
                                                                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                    }
                                                                                },
                                                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                            },
                                                                            "matchLabels": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "additionalProperties": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "additionalProperties": {
                                                                                    "type": "string"
                                                                                },
                                                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                            }
                                                                        },
                                                                        "description": "A label query over a set of resources, in this case pods."
                                                                    },
                                                                    "namespaces": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                                    },
                                                                    "topologyKey": {
                                                                        "type": "string",
                                                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                                    }
                                                                },
                                                                "required": [
                                                                    "topologyKey"
                                                                ],
                                                                "description": "Required. A pod affinity term, associated with the corresponding weight."
                                                            },
                                                            "weight": {
                                                                "type": "integer",
                                                                "format": "int32",
                                                                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100."
                                                            }
                                                        },
                                                        "required": [
                                                            "podAffinityTerm",
                                                            "weight"
                                                        ],
                                                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)"
                                                    },
                                                    "properties": {
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "podAffinityTerm": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "labelSelector": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "matchExpressions": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "object",
                                                                                        "properties": {
                                                                                            "key": {
                                                                                                "type": "string",
                                                                                                "description": "key is the label key that the selector applies to."
                                                                                            },
                                                                                            "operator": {
                                                                                                "type": "string",
                                                                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                            },
                                                                                            "values": {
                                                                                                "type": "array",
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "properties": {
                                                                                                    "items": {
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "key",
                                                                                            "operator"
                                                                                        ],
                                                                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "object",
                                                                                            "properties": {
                                                                                                "key": {
                                                                                                    "type": "string",
                                                                                                    "description": "key is the label key that the selector applies to."
                                                                                                },
                                                                                                "operator": {
                                                                                                    "type": "string",
                                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                                },
                                                                                                "values": {
                                                                                                    "type": "array",
                                                                                                    "items": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "properties": {
                                                                                                        "items": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "key",
                                                                                                "operator"
                                                                                            ],
                                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                        }
                                                                                    },
                                                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                                },
                                                                                "matchLabels": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                        "additionalProperties": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "additionalProperties": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                                }
                                                                            },
                                                                            "description": "A label query over a set of resources, in this case pods."
                                                                        },
                                                                        "namespaces": {
                                                                            "type": "array",
                                                                            "items": {
                                                                                "type": "string"
                                                                            },
                                                                            "properties": {
                                                                                "items": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                                        },
                                                                        "topologyKey": {
                                                                            "type": "string",
                                                                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "topologyKey"
                                                                    ],
                                                                    "description": "Required. A pod affinity term, associated with the corresponding weight."
                                                                },
                                                                "weight": {
                                                                    "type": "integer",
                                                                    "format": "int32",
                                                                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100."
                                                                }
                                                            },
                                                            "required": [
                                                                "podAffinityTerm",
                                                                "weight"
                                                            ],
                                                            "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)"
                                                        }
                                                    },
                                                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
                                                },
                                                "requiredDuringSchedulingIgnoredDuringExecution": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "labelSelector": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "matchExpressions": {
                                                                        "type": "array",
                                                                        "items": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "key": {
                                                                                    "type": "string",
                                                                                    "description": "key is the label key that the selector applies to."
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string",
                                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                },
                                                                                "values": {
                                                                                    "type": "array",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "properties": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "key",
                                                                                "operator"
                                                                            ],
                                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                        },
                                                                        "properties": {
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "key is the label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            }
                                                                        },
                                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                    },
                                                                    "matchLabels": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "additionalProperties": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "additionalProperties": {
                                                                            "type": "string"
                                                                        },
                                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                    }
                                                                },
                                                                "description": "A label query over a set of resources, in this case pods."
                                                            },
                                                            "namespaces": {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "properties": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                            },
                                                            "topologyKey": {
                                                                "type": "string",
                                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                            }
                                                        },
                                                        "required": [
                                                            "topologyKey"
                                                        ],
                                                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running"
                                                    },
                                                    "properties": {
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "labelSelector": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "matchExpressions": {
                                                                            "type": "array",
                                                                            "items": {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "key": {
                                                                                        "type": "string",
                                                                                        "description": "key is the label key that the selector applies to."
                                                                                    },
                                                                                    "operator": {
                                                                                        "type": "string",
                                                                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                    },
                                                                                    "values": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "properties": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "key",
                                                                                    "operator"
                                                                                ],
                                                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                            },
                                                                            "properties": {
                                                                                "items": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                        "key": {
                                                                                            "type": "string",
                                                                                            "description": "key is the label key that the selector applies to."
                                                                                        },
                                                                                        "operator": {
                                                                                            "type": "string",
                                                                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                                                                        },
                                                                                        "values": {
                                                                                            "type": "array",
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "properties": {
                                                                                                "items": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "key",
                                                                                        "operator"
                                                                                    ],
                                                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                                                                }
                                                                            },
                                                                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                                                        },
                                                                        "matchLabels": {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "additionalProperties": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "additionalProperties": {
                                                                                "type": "string"
                                                                            },
                                                                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                                                        }
                                                                    },
                                                                    "description": "A label query over a set of resources, in this case pods."
                                                                },
                                                                "namespaces": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "properties": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                                                                },
                                                                "topologyKey": {
                                                                    "type": "string",
                                                                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                                                }
                                                            },
                                                            "required": [
                                                                "topologyKey"
                                                            ],
                                                            "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running"
                                                        }
                                                    },
                                                    "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
                                                }
                                            },
                                            "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s))."
                                        }
                                    },
                                    "description": "Affinity is a group of affinity scheduling rules."
                                },
                                "labels": {
                                    "type": "object",
                                    "properties": {
                                        "additionalProperties": {
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                },
                                "name": {
                                    "type": "string"
                                },
                                "tolerations": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "effect": {
                                                "type": "string",
                                                "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."
                                            },
                                            "key": {
                                                "type": "string",
                                                "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."
                                            },
                                            "operator": {
                                                "type": "string",
                                                "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category."
                                            },
                                            "tolerationSeconds": {
                                                "type": "integer",
                                                "format": "int64",
                                                "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system."
                                            },
                                            "value": {
                                                "type": "string",
                                                "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
                                            }
                                        },
                                        "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>."
                                    },
                                    "properties": {
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "effect": {
                                                    "type": "string",
                                                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."
                                                },
                                                "key": {
                                                    "type": "string",
                                                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."
                                                },
                                                "operator": {
                                                    "type": "string",
                                                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category."
                                                },
                                                "tolerationSeconds": {
                                                    "type": "integer",
                                                    "format": "int64",
                                                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system."
                                                },
                                                "value": {
                                                    "type": "string",
                                                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
                                                }
                                            },
                                            "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>."
                                        }
                                    }
                                }
                            },
                            "required": [
                                "labels",
                                "name"
                            ]
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "properties": {
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            },
                            "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
                        },
                        "requests": {
                            "type": "object",
                            "properties": {
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            },
                            "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
                        }
                    },
                    "description": "ResourceRequirements describes the compute resource requirements."
                },
                "restore": {
                    "type": "object",
                    "properties": {
                        "backupName": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "backupName"
                    ]
                },
                "serviceAccountName": {
                    "type": "string"
                },
                "sidecarEnv": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the environment variable. Must be a C_IDENTIFIER."
                            },
                            "value": {
                                "type": "string",
                                "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
                            },
                            "valueFrom": {
                                "type": "object",
                                "properties": {
                                    "configMapKeyRef": {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "string",
                                                "description": "The key to select."
                                            },
                                            "name": {
                                                "type": "string",
                                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                                            },
                                            "optional": {
                                                "type": "boolean",
                                                "description": "Specify whether the ConfigMap or its key must be defined"
                                            }
                                        },
                                        "required": [
                                            "key"
                                        ],
                                        "description": "Selects a key of a ConfigMap."
                                    },
                                    "fieldRef": {
                                        "type": "object",
                                        "properties": {
                                            "apiVersion": {
                                                "type": "string",
                                                "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
                                            },
                                            "fieldPath": {
                                                "type": "string",
                                                "description": "Path of the field to select in the specified API version."
                                            }
                                        },
                                        "required": [
                                            "fieldPath"
                                        ],
                                        "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP."
                                    },
                                    "resourceFieldRef": {
                                        "type": "object",
                                        "properties": {
                                            "containerName": {
                                                "type": "string",
                                                "description": "Container name: required for volumes, optional for env vars"
                                            },
                                            "divisor": {
                                                "type": "string",
                                                "description": "Specifies the output format of the exposed resources, defaults to \"1\""
                                            },
                                            "resource": {
                                                "type": "string",
                                                "description": "Required: resource to select"
                                            }
                                        },
                                        "required": [
                                            "resource"
                                        ],
                                        "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported."
                                    },
                                    "secretKeyRef": {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "string",
                                                "description": "The key of the secret to select from.  Must be a valid secret key."
                                            },
                                            "name": {
                                                "type": "string",
                                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                                            },
                                            "optional": {
                                                "type": "boolean",
                                                "description": "Specify whether the Secret or its key must be defined"
                                            }
                                        },
                                        "required": [
                                            "key"
                                        ],
                                        "description": "Selects a key of a secret in the pod's namespace"
                                    }
                                },
                                "description": "Source for the environment variable's value. Cannot be used if value is not empty."
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "description": "EnvVar represents an environment variable present in a Container."
                    },
                    "properties": {
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name of the environment variable. Must be a C_IDENTIFIER."
                                },
                                "value": {
                                    "type": "string",
                                    "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
                                },
                                "valueFrom": {
                                    "type": "object",
                                    "properties": {
                                        "configMapKeyRef": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "string",
                                                    "description": "The key to select."
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                                                },
                                                "optional": {
                                                    "type": "boolean",
                                                    "description": "Specify whether the ConfigMap or its key must be defined"
                                                }
                                            },
                                            "required": [
                                                "key"
                                            ],
                                            "description": "Selects a key of a ConfigMap."
                                        },
                                        "fieldRef": {
                                            "type": "object",
                                            "properties": {
                                                "apiVersion": {
                                                    "type": "string",
                                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
                                                },
                                                "fieldPath": {
                                                    "type": "string",
                                                    "description": "Path of the field to select in the specified API version."
                                                }
                                            },
                                            "required": [
                                                "fieldPath"
                                            ],
                                            "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP."
                                        },
                                        "resourceFieldRef": {
                                            "type": "object",
                                            "properties": {
                                                "containerName": {
                                                    "type": "string",
                                                    "description": "Container name: required for volumes, optional for env vars"
                                                },
                                                "divisor": {
                                                    "type": "string",
                                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\""
                                                },
                                                "resource": {
                                                    "type": "string",
                                                    "description": "Required: resource to select"
                                                }
                                            },
                                            "required": [
                                                "resource"
                                            ],
                                            "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported."
                                        },
                                        "secretKeyRef": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "string",
                                                    "description": "The key of the secret to select from.  Must be a valid secret key."
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                                                },
                                                "optional": {
                                                    "type": "boolean",
                                                    "description": "Specify whether the Secret or its key must be defined"
                                                }
                                            },
                                            "required": [
                                                "key"
                                            ],
                                            "description": "Selects a key of a secret in the pod's namespace"
                                        }
                                    },
                                    "description": "Source for the environment variable's value. Cannot be used if value is not empty."
                                }
                            },
                            "required": [
                                "name"
                            ],
                            "description": "EnvVar represents an environment variable present in a Container."
                        }
                    }
                },
                "sidecarImage": {
                    "type": "string"
                },
                "sidecarResources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "properties": {
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            },
                            "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
                        },
                        "requests": {
                            "type": "object",
                            "properties": {
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            },
                            "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
                        }
                    },
                    "description": "ResourceRequirements describes the compute resource requirements."
                },
                "sidecarSecretVolumeSource": {
                    "type": "object",
                    "properties": {
                        "defaultMode": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
                        },
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "key": {
                                        "type": "string",
                                        "description": "The key to project."
                                    },
                                    "mode": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                                    }
                                },
                                "required": [
                                    "key",
                                    "path"
                                ],
                                "description": "Maps a string key to a path within a volume."
                            },
                            "properties": {
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "description": "The key to project."
                                        },
                                        "mode": {
                                            "type": "integer",
                                            "format": "int32",
                                            "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
                                        },
                                        "path": {
                                            "type": "string",
                                            "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                                        }
                                    },
                                    "required": [
                                        "key",
                                        "path"
                                    ],
                                    "description": "Maps a string key to a path within a volume."
                                }
                            },
                            "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
                        },
                        "optional": {
                            "type": "boolean",
                            "description": "Specify whether the Secret or its keys must be defined"
                        },
                        "secretName": {
                            "type": "string",
                            "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
                        }
                    },
                    "description": "Adapts a Secret into a volume. \n The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling."
                },
                "userConfigMapVolumeSource": {
                    "type": "object",
                    "properties": {
                        "defaultMode": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
                        },
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "key": {
                                        "type": "string",
                                        "description": "The key to project."
                                    },
                                    "mode": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                                    }
                                },
                                "required": [
                                    "key",
                                    "path"
                                ],
                                "description": "Maps a string key to a path within a volume."
                            },
                            "properties": {
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "description": "The key to project."
                                        },
                                        "mode": {
                                            "type": "integer",
                                            "format": "int32",
                                            "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
                                        },
                                        "path": {
                                            "type": "string",
                                            "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                                        }
                                    },
                                    "required": [
                                        "key",
                                        "path"
                                    ],
                                    "description": "Maps a string key to a path within a volume."
                                }
                            },
                            "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
                        },
                        "name": {
                            "type": "string",
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                        },
                        "optional": {
                            "type": "boolean",
                            "description": "Specify whether the ConfigMap or its keys must be defined"
                        }
                    },
                    "description": "Adapts a ConfigMap into a volume. \n The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling."
                },
                "userSecretVolumeSource": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "defaultMode": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
                            },
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "description": "The key to project."
                                        },
                                        "mode": {
                                            "type": "integer",
                                            "format": "int32",
                                            "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
                                        },
                                        "path": {
                                            "type": "string",
                                            "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                                        }
                                    },
                                    "required": [
                                        "key",
                                        "path"
                                    ],
                                    "description": "Maps a string key to a path within a volume."
                                },
                                "properties": {
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "string",
                                                "description": "The key to project."
                                            },
                                            "mode": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
                                            },
                                            "path": {
                                                "type": "string",
                                                "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                                            }
                                        },
                                        "required": [
                                            "key",
                                            "path"
                                        ],
                                        "description": "Maps a string key to a path within a volume."
                                    }
                                },
                                "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
                            },
                            "optional": {
                                "type": "boolean",
                                "description": "Specify whether the Secret or its keys must be defined"
                            },
                            "secretName": {
                                "type": "string",
                                "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
                            }
                        },
                        "description": "Adapts a Secret into a volume. \n The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling."
                    },
                    "properties": {
                        "items": {
                            "type": "object",
                            "properties": {
                                "defaultMode": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
                                },
                                "items": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "string",
                                                "description": "The key to project."
                                            },
                                            "mode": {
                                                "type": "integer",
                                                "format": "int32",
                                                "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
                                            },
                                            "path": {
                                                "type": "string",
                                                "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                                            }
                                        },
                                        "required": [
                                            "key",
                                            "path"
                                        ],
                                        "description": "Maps a string key to a path within a volume."
                                    },
                                    "properties": {
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "string",
                                                    "description": "The key to project."
                                                },
                                                "mode": {
                                                    "type": "integer",
                                                    "format": "int32",
                                                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
                                                },
                                                "path": {
                                                    "type": "string",
                                                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                                                }
                                            },
                                            "required": [
                                                "key",
                                                "path"
                                            ],
                                            "description": "Maps a string key to a path within a volume."
                                        }
                                    },
                                    "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
                                },
                                "optional": {
                                    "type": "boolean",
                                    "description": "Specify whether the Secret or its keys must be defined"
                                },
                                "secretName": {
                                    "type": "string",
                                    "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
                                }
                            },
                            "description": "Adapts a Secret into a volume. \n The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling."
                        }
                    }
                },
                "provisioningState": {
                    "type": "string"
                },
                "status": {
                    "type": "object",
                    "description": "CassandraDataCenterStatus defines the observed state of CassandraDataCenter"
                }
            }
        },
        "cassandraDataCenters": {
            "type": "object",
            "properties": {
                "properties": {
                    "$ref": "#/definitions/cassandraDataCentersProperties"
                },
                "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Resource Id"
                },
                "name": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Resource Name"
                },
                "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Resource Type"
                },
                "location": {
                    "type": "string",
                    "description": "The resource location"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Resource tags"
                },
                "extendedLocation": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "The extended location type."
                        },
                        "name": {
                            "type": "string",
                            "description": "The extended location name."
                        }
                    }
                }
            },
            "required": [
                "location"
            ],
            "description": "The cassandraDataCenters resource definition."
        },
        "cassandraDataCentersPatch": {
            "type": "object",
            "properties": {
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Resource tags"
                }
            },
            "description": "The cassandraDataCenters resource patch definition."
        },
        "cassandraDataCentersListResult": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cassandraDataCenters"
                    }
                },
                "nextLink": {
                    "type": "string"
                }
            }
        },
        "ResourceProviderOperationList": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceProviderOperation"
                    }
                },
                "nextLink": {
                    "type": "string"
                }
            },
            "description": "Results of the request to list operations."
        },
        "ResourceProviderOperation": {
            "type": "object",
            "properties": {
                "isDataAction": {
                    "type": "string",
                    "description": "Indicates whether the operation applies to data-plane."
                },
                "name": {
                    "type": "string",
                    "description": "Operation name, in format of {provider}/{resource}/{operation}"
                },
                "display": {
                    "type": "object",
                    "properties": {
                        "provider": {
                            "type": "string",
                            "description": "The resource provider."
                        },
                        "resource": {
                            "type": "string",
                            "description": "Resource on which the operation is performed."
                        },
                        "operation": {
                            "type": "string",
                            "description": "Type of operation: get, read, delete, etc."
                        },
                        "description": {
                            "type": "string",
                            "description": "Description of this operation."
                        }
                    },
                    "description": "Display metadata associated with the operation."
                }
            },
            "description": "Results of the request to list operations."
        },
        "VCenter": {
            "description": "Defines the vCenter.",
            "required": [
                "location",
                "properties"
            ],
            "type": "object",
            "x-ms-azure-resource": true,
            "properties": {
                "properties": {
                    "x-ms-client-flatten": true,
                    "description": "Resource properties.",
                    "$ref": "#/definitions/VCenterProperties"
                },
                "location": {
                    "description": "Gets or sets the location.",
                    "type": "string",
                    "x-ms-mutability": [
                        "read",
                        "create"
                    ]
                },
                "extendedLocation": {
                    "$ref": "#/definitions/ExtendedLocation",
                    "description": "Gets or sets the extended location."
                },
                "systemData": {
                    "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
                    "description": "The system data."
                },
                "tags": {
                    "description": "Gets or sets the Resource tags.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Gets or sets the name.",
                    "type": "string",
                    "readOnly": true
                },
                "id": {
                    "description": "Gets or sets the Id.",
                    "type": "string",
                    "readOnly": true
                },
                "type": {
                    "description": "Gets or sets the type of the resource.",
                    "type": "string",
                    "readOnly": true
                },
                "kind": {
                    "type": "string",
                    "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
                }
            }
        },
        "VCenterProperties": {
            "description": "Defines the resource properties.",
            "required": [
                "fqdn"
            ],
            "type": "object",
            "properties": {
                "uuid": {
                    "description": "Gets or sets a unique identifier for this resource.",
                    "type": "string",
                    "readOnly": true
                },
                "fqdn": {
                    "description": "Gets or sets the FQDN/IPAddress of the vCenter.",
                    "type": "string"
                },
                "port": {
                    "format": "int32",
                    "description": "Gets or sets the port of the vCenter.",
                    "maximum": 65535,
                    "minimum": 1,
                    "type": "integer"
                },
                "version": {
                    "description": "Gets or sets the version of the vCenter.",
                    "type": "string",
                    "readOnly": true
                },
                "instanceUuid": {
                    "description": "Gets or sets the instance UUID of the vCenter.",
                    "type": "string",
                    "readOnly": true
                },
                "connectionStatus": {
                    "description": "Gets or sets the connection status to the vCenter.",
                    "type": "string",
                    "readOnly": true
                },
                "customResourceName": {
                    "description": "Gets the name of the corresponding resource in Kubernetes.",
                    "type": "string",
                    "readOnly": true
                },
                "provisioningState": {
                    "description": "Gets or sets the provisioning state.",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "VCentersList": {
            "description": "List of VCenters.",
            "type": "object",
            "properties": {
                "nextLink": {
                    "description": "Url to follow for getting next page of VCenters.",
                    "type": "string"
                },
                "value": {
                    "description": "Array of VCenters",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VCenter"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "InventoryItemsList": {
            "description": "List of InventoryItems.",
            "type": "object",
            "properties": {
                "nextLink": {
                    "description": "Url to follow for getting next page of InventoryItems.",
                    "type": "string"
                },
                "value": {
                    "description": "Array of InventoryItems",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InventoryItem"
                    }
                }
            },
            "required": [
                "value"
            ]
        },
        "InventoryItemProperties": {
            "description": "Defines the resource properties.",
            "type": "object",
            "properties": {
                "managedResourceId": {
                    "description": "Gets or sets the tracked resource id corresponding to the inventory resource.",
                    "type": "string"
                },
                "moRefId": {
                    "description": "Gets or sets the MoRef (Managed Object Reference) ID for the inventory item.",
                    "type": "string"
                },
                "moName": {
                    "description": "Gets or sets the vCenter Managed Object name for the inventory item.",
                    "type": "string"
                },
                "provisioningState": {
                    "description": "Gets or sets the provisioning state.",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "InventoryItem": {
            "description": "Defines the inventory item.",
            "required": [
                "properties"
            ],
            "type": "object",
            "properties": {
                "properties": {
                    "x-ms-client-flatten": true,
                    "description": "Resource properties.",
                    "$ref": "#/definitions/InventoryItemProperties"
                },
                "kind": {
                    "type": "string",
                    "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
                }
            },
            "x-ms-azure-resource": true
        },
        "ResourcePatch": {
            "type": "object",
            "properties": {
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Resource tags."
                }
            },
            "description": "Object containing updates for patch operations."
        },
        "ExtendedLocation": {
            "type": "object",
            "description": "The extended location.",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The extended location type."
                },
                "name": {
                    "type": "string",
                    "description": "The extended location name."
                }
            }
        },
        "ErrorResponse": {
            "description": "Error response.",
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/ErrorDefinition",
                    "description": "The error details."
                }
            }
        },
        "ErrorDefinition": {
            "description": "Error definition.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Service specific error code which serves as the substatus for the HTTP error code.",
                    "type": "string",
                    "readOnly": true
                },
                "message": {
                    "description": "Description of the error.",
                    "type": "string",
                    "readOnly": true
                },
                "details": {
                    "description": "Internal error details.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ErrorDefinition"
                    },
                    "readOnly": true
                }
            }
        }
    },
    "parameters": {
        "cassandraDataCentersNameParameter": {
            "name": "cassandraDataCentersName",
            "in": "path",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "minLength": 3
        },
        "SubscriptionIdParameter": {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)"
        },
        "ResourceGroupNameParameter": {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
        },
        "ApiVersionParameter": {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The API version to be used with the HTTP request (e.g. YYYY-MM-DD)."
        }
    }
}