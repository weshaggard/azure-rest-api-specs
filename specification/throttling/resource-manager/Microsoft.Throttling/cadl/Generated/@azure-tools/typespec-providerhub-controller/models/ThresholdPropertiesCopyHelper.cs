// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated />

using System;
using System.ComponentModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Microsoft.TypeSpec.ProviderHub.Controller;

namespace Microsoft.Throttling.Service.Models
{
    /// <summary>
    /// Helper for merging canonical ThresholdProperties models as part of a PUT or PATCH operation
    /// </summary>
    public partial class ThresholdPropertiesCopyHelper
    {
        /// <summary>
        /// Extensibility point: perform actions before data is copied
        /// </summary>
        /// <param name="source">The source ThresholdProperties</param>
        /// <param name="target">The target ThresholdProperties</param>
        partial void OnBeginCopyForPatch(ThresholdProperties source, ThresholdProperties target);

        /// <summary>
        /// Extensibility point: perform actions after data is copied
        /// </summary>
        /// <param name="source">The source ThresholdProperties</param>
        /// <param name="target">The target ThresholdProperties</param>
        partial void OnEndCopyForPatch(ThresholdProperties source, ThresholdProperties target);

        /// <summary>
        /// Copy the properties of a source ThresholdProperties to a target ThresholdProperties, using PATCH semantics
        /// </summary>
        /// <param name="source">The source ThresholdProperties</param>
        /// <param name="target">The target ThresholdProperties</param>
        public void CopyForPatch(ThresholdProperties source, ThresholdProperties target)
        {
            var serialization = source.SerializationInfo;
            OnBeginCopyForPatch(source, target);
            if (serialization.IsSerializedProperty(nameof(source.ProvisioningState)))
                target.ProvisioningState = source.ProvisioningState;
            if (serialization.IsSerializedProperty(nameof(source.DecisionType)))
                target.DecisionType = source.DecisionType;
            if (serialization.IsSerializedProperty(nameof(source.Value)))
                target.Value = source.Value;
            if (serialization.IsSerializedProperty(nameof(source.Depth)))
                target.Depth = source.Depth;
            if (serialization.IsSerializedProperty(nameof(source.MinDecisionDuration)))
                target.MinDecisionDuration = source.MinDecisionDuration;
            OnEndCopyForPatch(source, target);
        }

        /// <summary>
        /// Extensibility point: perform actions before data is copied
        /// </summary>
        /// <param name="source">The source ThresholdProperties</param>
        /// <param name="target">The target ThresholdProperties</param>
        partial void OnBeginCopyForPut(ThresholdProperties source, ThresholdProperties target);

        /// <summary>
        /// Extensibility point: perform actions after data is copied
        /// </summary>
        /// <param name="source">The source ThresholdProperties</param>
        /// <param name="target">The target ThresholdProperties</param>
        partial void OnEndCopyForPut(ThresholdProperties source, ThresholdProperties target);

        /// <summary>
        /// Copy the properties of a source ThresholdProperties to a target ThresholdProperties, using PUT semantics
        /// </summary>
        /// <param name="source">The source ThresholdProperties</param>
        /// <param name="target">The target ThresholdProperties</param>
        public void CopyForPut(ThresholdProperties source, ThresholdProperties target)
        {
            var serialization = source.SerializationInfo;
            OnBeginCopyForPut(source, target);
            target.ProvisioningState = source.ProvisioningState;
            target.DecisionType = source.DecisionType;
            target.Value = source.Value;
            target.Depth = source.Depth;
            target.MinDecisionDuration = source.MinDecisionDuration;
            OnEndCopyForPut(source, target);
        }
    }
}
