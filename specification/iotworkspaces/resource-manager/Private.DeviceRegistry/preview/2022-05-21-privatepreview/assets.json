{
  "x-generator": "NSwag v13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v12.0.0.0))",
  "swagger": "2.0",
  "info": {
    "title": "IoT Workspace Assets Resource Provider",
    "version": "2022-05-21-privatepreview"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/providers/private.deviceregistry/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "operationId": "List_Assets_Subscription",
        "description": "List all assets in a subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AssetResponseList"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/private.deviceregistry/assets": {
      "get": {
        "tags": [
          "RootAsset"
        ],
        "operationId": "List_Assets_In_ResourceGroup",
        "description": "List all assets in a resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AssetResponseList"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/private.deviceregistry/assets/{assetName}": {
      "put": {
        "tags": [
          "RootAsset"
        ],
        "operationId": "Create_Or_Replace_Asset",
        "description": "Create a new asset or replace an existing asset.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/assetNameParameter"
          },
          {
            "name": "asset",
            "in": "body",
            "required": true,
            "description": "Resource create parameters.",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          {
            "name": "assetGroupId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "RootAsset"
        ],
        "operationId": "Update_Asset",
        "description": "Update specific asset properties.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/assetNameParameter"
          },
          {
            "name": "asset",
            "in": "body",
            "required": true,
            "description": "Resource Patch parameters.",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "RootAsset"
        ],
        "operationId": "Delete_Asset",
        "description": "Delete an asset.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/assetNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "get": {
        "tags": [
          "RootAsset"
        ],
        "operationId": "Read_Asset.",
        "description": "Retrieve a single asset.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/assetNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/private.deviceregistry/locations/{location}/operationStatuses/{operationId}": {
      "get": {
        "tags": [
          "RootAsset"
        ],
        "operationId": "Get_Operation_Status",
        "description": "Returns the current status of an async operation.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/LocationParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/OperationIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested operation status",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/OperationStatusResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/providers/private.deviceregistry/operations": {
      "get": {
        "description": "Returns list of operations.",
        "operationId": "Operation_List",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Operations returned if request was successful.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "Error response returned if request was unsuccessful.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "parameters": {
    "assetNameParameter": {
      "name": "assetName",
      "in": "path",
      "required": true,
      "type": "string",
      "maxLength": 64,
      "minLength": 3
    }
  },
  "definitions": {
    "AssetResponseList": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        },
        "nextLink": {
          "type": "string"
        }
      },
      "description": "List of Assets."
    },
    "Asset": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/AssetProperties",
          "description": "Resource properties."
        },
        "extendedLocation": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The extended location type."
            },
            "name": {
              "type": "string",
              "description": "The extended location name."
            }
          }
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "AssetProperties": {
      "description": "Defines the asset properties.",
      "type": "object",
      "properties": {
        "uuid": {
          "description": "Globally unique, immutable, non-reusable id.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Resource path to asset type (model) definition.",
          "type": "string"
        },
        "path": {
          "description": "Asset path that identifies the asset within a namespace (Redmond/ElectricCars/Painting/LeftBack).",
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "description": "Enabled/Disabled status of the asset."
        },
        "externalAssetId": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "description": "Asset id provided by the customer."
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable display name."
        },
        "manufacturer": {
          "type": "string",
          "description": "Asset manufacturer name."
        },
        "manufacturerUri": {
          "type": "string",
          "description": "Asset manufacturer URI."
        },
        "model": {
          "type": "string",
          "description": "Asset model name."
        },
        "productCode": {
          "type": "string",
          "description": "Asset product code."
        },
        "hardwareRevision": {
          "type": "string",
          "description": "Revision number of the hardware."
        },
        "softwareRevision": {
          "type": "string",
          "description": "Revision number of the software."
        },
        "overallRevision": {
          "type": "string",
          "description": "Overall revision number of the asset."
        },
        "manual": {
          "type": "string",
          "description": "URL for the manual."
        },
        "class": {
          "type": "string",
          "description": "The domain or purpose of the asset."
        },
        "serialNumber": {
          "type": "string",
          "description": "Asset serial number."
        },
        "productInstanceUri": {
          "type": "string",
          "description": "Unique resource identifier for the asset."
        },
        "revisionCounter": {
          "type": "integer",
          "description": "The number of times the configuration data has been modified."
        },
        "softwareReleaseDate": {
          "type": "string",
          "description": "The date when the software is released."
        },
        "patchIdentifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of patches applied to a software version."
        },
        "mappings": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "dataSource": {
                "type": "string",
                "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
              },
              "typePath": {
                "type": "string",
                "description": "The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1."
              },
              "observabilityMode": {
                "type": "string",
                "enum": [
                  "none",
                  "histogram",
                  "gauge",
                  "counter"
                ],
                "description": "An indication of how the data point should be mapped to OpenTelemetry (none, histogram, gauge, counter, etc.)."
              },
              "additionalConfiguration": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Protocol-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
              }
            }
          },
          "description": "Array of mapping (binding) elements, one for each capability in the asset type definition (e.g. where to find the value for each asset capability)."
        },
        "references": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "targetId"
            ],
            "properties": {
              "targetId": {
                "type": "string",
                "description": "The asset id to target."
              },
              "name": {
                "type": "string",
                "description": "The name of the reference."
              },
              "assetTypeReferenceId": {
                "type": "string",
                "description": "The capability id of the reference (relationship) in the asset type."
              }
            }
          },
          "description": "Set of references from this asset (defined by the asset type). One common reference type is a component (part-of) reference."
        },
        "provisioningState": {
          "type": "string",
          "description": "Provisioning state of the resource.",
          "readOnly": true
        }
      }
    }
  }
}
