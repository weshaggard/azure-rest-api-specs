// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated />

using System;
using System.ComponentModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Microsoft.Cadl.ProviderHub.Controller;

namespace Microsoft.Impact.Service.Models
{
    /// <summary>
    /// Helper for merging canonical WorkloadImpactsProperties models as part of a PUT or PATCH operation
    /// </summary>
    public partial class WorkloadImpactsPropertiesCopyHelper
    {
        /// <summary>
        /// Extensibility point: perform actions before data is copied
        /// </summary>
        /// <param name="source">The source WorkloadImpactsProperties</param>
        /// <param name="target">The target WorkloadImpactsProperties</param>
        partial void OnBeginCopyForPatch(WorkloadImpactsProperties source, WorkloadImpactsProperties target);

        /// <summary>
        /// Extensibility point: perform actions after data is copied
        /// </summary>
        /// <param name="source">The source WorkloadImpactsProperties</param>
        /// <param name="target">The target WorkloadImpactsProperties</param>
        partial void OnEndCopyForPatch(WorkloadImpactsProperties source, WorkloadImpactsProperties target);

        /// <summary>
        /// Copy the properties of a source WorkloadImpactsProperties to a target WorkloadImpactsProperties, using PATCH semantics
        /// </summary>
        /// <param name="source">The source WorkloadImpactsProperties</param>
        /// <param name="target">The target WorkloadImpactsProperties</param>
        public void CopyForPatch(WorkloadImpactsProperties source, WorkloadImpactsProperties target)
        {
            var serialization = source.SerializationInfo;
            OnBeginCopyForPatch(source, target);
            if (serialization.IsSerializedProperty(nameof(source.ProvisioningState)))
                target.ProvisioningState = source.ProvisioningState;
            if (serialization.IsSerializedProperty(nameof(source.StartDateTime)))
                target.StartDateTime = source.StartDateTime;
            if (serialization.IsSerializedProperty(nameof(source.EndDateTime)))
                target.EndDateTime = source.EndDateTime;
            if (serialization.IsSerializedProperty(nameof(source.ImpactUniqueId)))
                target.ImpactUniqueId = source.ImpactUniqueId;
            if (serialization.IsSerializedProperty(nameof(source.ReportedTimeUtc)))
                target.ReportedTimeUtc = source.ReportedTimeUtc;
            if (serialization.IsSerializedProperty(nameof(source.ImpactCategory)))
                target.ImpactCategory = source.ImpactCategory;
            if (serialization.IsSerializedProperty(nameof(source.ImpactDescription)))
                target.ImpactDescription = source.ImpactDescription;
            if (serialization.IsSerializedProperty(nameof(source.ArmCorrelationIds)))
                target.ArmCorrelationIds = source.ArmCorrelationIds;
            if (serialization.IsSerializedProperty(nameof(source.ImpactedResourceUri)))
                target.ImpactedResourceUri = source.ImpactedResourceUri;
            if (serialization.IsSerializedProperty(nameof(source.AdditionalProperties)))
                target.AdditionalProperties = source.AdditionalProperties;
            if (serialization.IsSerializedProperty(nameof(source.Connectivity)))
                target.Connectivity = source.Connectivity;
            if (serialization.IsSerializedProperty(nameof(source.Performance)))
                target.Performance = source.Performance;
            if (serialization.IsSerializedProperty(nameof(source.Workload)))
                target.Workload = source.Workload;
            if (serialization.IsSerializedProperty(nameof(source.ImpactGroupId)))
                target.ImpactGroupId = source.ImpactGroupId;
            if (serialization.IsSerializedProperty(nameof(source.ReportedSource)))
                target.ReportedSource = source.ReportedSource;
            if (serialization.IsSerializedProperty(nameof(source.Confidence)))
                target.Confidence = source.Confidence;
            OnEndCopyForPatch(source, target);
        }

        /// <summary>
        /// Extensibility point: perform actions before data is copied
        /// </summary>
        /// <param name="source">The source WorkloadImpactsProperties</param>
        /// <param name="target">The target WorkloadImpactsProperties</param>
        partial void OnBeginCopyForPut(WorkloadImpactsProperties source, WorkloadImpactsProperties target);

        /// <summary>
        /// Extensibility point: perform actions after data is copied
        /// </summary>
        /// <param name="source">The source WorkloadImpactsProperties</param>
        /// <param name="target">The target WorkloadImpactsProperties</param>
        partial void OnEndCopyForPut(WorkloadImpactsProperties source, WorkloadImpactsProperties target);

        /// <summary>
        /// Copy the properties of a source WorkloadImpactsProperties to a target WorkloadImpactsProperties, using PUT semantics
        /// </summary>
        /// <param name="source">The source WorkloadImpactsProperties</param>
        /// <param name="target">The target WorkloadImpactsProperties</param>
        public void CopyForPut(WorkloadImpactsProperties source, WorkloadImpactsProperties target)
        {
            var serialization = source.SerializationInfo;
            OnBeginCopyForPut(source, target);
            target.ProvisioningState = source.ProvisioningState;
            target.StartDateTime = source.StartDateTime;
            target.EndDateTime = source.EndDateTime;
            target.ImpactUniqueId = source.ImpactUniqueId;
            target.ReportedTimeUtc = source.ReportedTimeUtc;
            target.ImpactCategory = source.ImpactCategory;
            target.ImpactDescription = source.ImpactDescription;
            target.ArmCorrelationIds = source.ArmCorrelationIds;
            target.ImpactedResourceUri = source.ImpactedResourceUri;
            target.AdditionalProperties = source.AdditionalProperties;
            target.Connectivity = source.Connectivity;
            target.Performance = source.Performance;
            target.Workload = source.Workload;
            target.ImpactGroupId = source.ImpactGroupId;
            target.ReportedSource = source.ReportedSource;
            target.Confidence = source.Confidence;
            OnEndCopyForPut(source, target);
        }
    }
}
