// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated />

using System;
using System.ComponentModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Microsoft.Cadl.ProviderHub.Controller;

namespace Microsoft.Impact.Service.Models
{
    /// <summary>
    /// Helper for merging canonical ImpactDetails models as part of a PUT or PATCH operation
    /// </summary>
    public partial class ImpactDetailsCopyHelper
    {
        /// <summary>
        /// Extensibility point: perform actions before data is copied
        /// </summary>
        /// <param name="source">The source ImpactDetails</param>
        /// <param name="target">The target ImpactDetails</param>
        partial void OnBeginCopyForPatch(ImpactDetails source, ImpactDetails target);

        /// <summary>
        /// Extensibility point: perform actions after data is copied
        /// </summary>
        /// <param name="source">The source ImpactDetails</param>
        /// <param name="target">The target ImpactDetails</param>
        partial void OnEndCopyForPatch(ImpactDetails source, ImpactDetails target);

        /// <summary>
        /// Copy the properties of a source ImpactDetails to a target ImpactDetails, using PATCH semantics
        /// </summary>
        /// <param name="source">The source ImpactDetails</param>
        /// <param name="target">The target ImpactDetails</param>
        public void CopyForPatch(ImpactDetails source, ImpactDetails target)
        {
            var serialization = source.SerializationInfo;
            OnBeginCopyForPatch(source, target);
            if (serialization.IsSerializedProperty(nameof(source.ImpactUniqueId)))
                target.ImpactUniqueId = source.ImpactUniqueId;
            if (serialization.IsSerializedProperty(nameof(source.ReportedTimeUtc)))
                target.ReportedTimeUtc = source.ReportedTimeUtc;
            if (serialization.IsSerializedProperty(nameof(source.StartDateTime)))
                target.StartDateTime = source.StartDateTime;
            if (serialization.IsSerializedProperty(nameof(source.EndDateTime)))
                target.EndDateTime = source.EndDateTime;
            if (serialization.IsSerializedProperty(nameof(source.ImpactCategory)))
                target.ImpactCategory = source.ImpactCategory;
            if (serialization.IsSerializedProperty(nameof(source.ImpactGroupId)))
                target.ImpactGroupId = source.ImpactGroupId;
            OnEndCopyForPatch(source, target);
        }

        /// <summary>
        /// Extensibility point: perform actions before data is copied
        /// </summary>
        /// <param name="source">The source ImpactDetails</param>
        /// <param name="target">The target ImpactDetails</param>
        partial void OnBeginCopyForPut(ImpactDetails source, ImpactDetails target);

        /// <summary>
        /// Extensibility point: perform actions after data is copied
        /// </summary>
        /// <param name="source">The source ImpactDetails</param>
        /// <param name="target">The target ImpactDetails</param>
        partial void OnEndCopyForPut(ImpactDetails source, ImpactDetails target);

        /// <summary>
        /// Copy the properties of a source ImpactDetails to a target ImpactDetails, using PUT semantics
        /// </summary>
        /// <param name="source">The source ImpactDetails</param>
        /// <param name="target">The target ImpactDetails</param>
        public void CopyForPut(ImpactDetails source, ImpactDetails target)
        {
            var serialization = source.SerializationInfo;
            OnBeginCopyForPut(source, target);
            target.ImpactUniqueId = source.ImpactUniqueId;
            target.ReportedTimeUtc = source.ReportedTimeUtc;
            target.StartDateTime = source.StartDateTime;
            target.EndDateTime = source.EndDateTime;
            target.ImpactCategory = source.ImpactCategory;
            target.ImpactGroupId = source.ImpactGroupId;
            OnEndCopyForPut(source, target);
        }
    }
}
