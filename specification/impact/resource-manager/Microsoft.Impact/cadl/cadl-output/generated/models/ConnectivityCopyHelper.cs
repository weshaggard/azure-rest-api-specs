// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated />

using System;
using System.ComponentModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Microsoft.Cadl.ProviderHub.Controller;

namespace Microsoft.Impact.Service.Models
{
    /// <summary>
    /// Helper for merging canonical Connectivity models as part of a PUT or PATCH operation
    /// </summary>
    public partial class ConnectivityCopyHelper
    {
        /// <summary>
        /// Extensibility point: perform actions before data is copied
        /// </summary>
        /// <param name="source">The source Connectivity</param>
        /// <param name="target">The target Connectivity</param>
        partial void OnBeginCopyForPatch(Connectivity source, Connectivity target);

        /// <summary>
        /// Extensibility point: perform actions after data is copied
        /// </summary>
        /// <param name="source">The source Connectivity</param>
        /// <param name="target">The target Connectivity</param>
        partial void OnEndCopyForPatch(Connectivity source, Connectivity target);

        /// <summary>
        /// Copy the properties of a source Connectivity to a target Connectivity, using PATCH semantics
        /// </summary>
        /// <param name="source">The source Connectivity</param>
        /// <param name="target">The target Connectivity</param>
        public void CopyForPatch(Connectivity source, Connectivity target)
        {
            var serialization = source.SerializationInfo;
            OnBeginCopyForPatch(source, target);
            if (serialization.IsSerializedProperty(nameof(source.Protocol)))
                target.Protocol = source.Protocol;
            if (serialization.IsSerializedProperty(nameof(source.Port)))
                target.Port = source.Port;
            if (serialization.IsSerializedProperty(nameof(source.Direction)))
                target.Direction = source.Direction;
            if (serialization.IsSerializedProperty(nameof(source.Source)))
                target.Source = source.Source;
            if (serialization.IsSerializedProperty(nameof(source.Destination)))
                target.Destination = source.Destination;
            OnEndCopyForPatch(source, target);
        }

        /// <summary>
        /// Extensibility point: perform actions before data is copied
        /// </summary>
        /// <param name="source">The source Connectivity</param>
        /// <param name="target">The target Connectivity</param>
        partial void OnBeginCopyForPut(Connectivity source, Connectivity target);

        /// <summary>
        /// Extensibility point: perform actions after data is copied
        /// </summary>
        /// <param name="source">The source Connectivity</param>
        /// <param name="target">The target Connectivity</param>
        partial void OnEndCopyForPut(Connectivity source, Connectivity target);

        /// <summary>
        /// Copy the properties of a source Connectivity to a target Connectivity, using PUT semantics
        /// </summary>
        /// <param name="source">The source Connectivity</param>
        /// <param name="target">The target Connectivity</param>
        public void CopyForPut(Connectivity source, Connectivity target)
        {
            var serialization = source.SerializationInfo;
            OnBeginCopyForPut(source, target);
            target.Protocol = source.Protocol;
            target.Port = source.Port;
            target.Direction = source.Direction;
            target.Source = source.Source;
            target.Destination = source.Destination;
            OnEndCopyForPut(source, target);
        }
    }
}
